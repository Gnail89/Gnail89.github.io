<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on 📕W.&#39;s Blog</title>
    <link>https://gnail89.github.io/categories/linux/</link>
    <description>Recent content in Linux on 📕W.&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 12 Aug 2025 00:00:00 +0800</lastBuildDate><atom:link href="https://gnail89.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Openstack_mk_vm</title>
      <link>https://gnail89.github.io/posts/openstack_mk_vm/</link>
      <pubDate>Tue, 12 Aug 2025 00:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/openstack_mk_vm/</guid>
      <description>引导虚拟机实例简单流程(AI) #!/bin/bash set -Eeuo pipefail basepath=$(cd `dirname $0`;pwd) readonly VM_FORMAT_FILE=&amp;#34;vm_info_format.txt&amp;#34; readonly HYPERVISOR_FILE=&amp;#34;env_available_host_list.txt&amp;#34; readonly VOL_TYPE_FILE=&amp;#34;env_cinder_volume_type.txt&amp;#34; readonly IMAGES_FILE=&amp;#34;env_image_list.txt&amp;#34; readonly DATA_SEPARATOR=&amp;#34;+&amp;#34; readonly MAX_PARALLEL=2 log() { local lvl=&amp;#34;$1&amp;#34; msg=&amp;#34;$2&amp;#34; printf &amp;#34;%s [%4s] %s\n&amp;#34; &amp;#34;$(date +&amp;#39;%F %T&amp;#39;)&amp;#34; &amp;#34;$lvl&amp;#34; &amp;#34;$msg&amp;#34; &amp;gt;&amp;amp;2 &amp;amp;&amp;amp; return 0 [[ &amp;#34;$lvl&amp;#34; == &amp;#34;ERROR&amp;#34; ]] &amp;amp;&amp;amp; exit 1 } trap &amp;#39;log ERROR &amp;#34;Script aborted in $FUNCNAME at line $LINENO&amp;#34;&amp;#39; ERR require_cmd() { command -v &amp;#34;$1&amp;#34; &amp;amp;&amp;gt;/dev/null || log ERROR &amp;#34;缺少命令: $1&amp;#34;;} init_deps() { for cmd in openstack nova awk grep sed tee; do require_cmd &amp;#34;$cmd&amp;#34;; done; } check_volumes(){ local retries=$1 count=0 vol_ids=(&amp;#34;${@:2}&amp;#34;) for ((i=0; i&amp;lt;retries; i++)); do count=0 for vid in &amp;#34;${vol_ids[@]}&amp;#34;; do [[ -z &amp;#34;$vid&amp;#34; || &amp;#34;$vid&amp;#34; == &amp;#34;None&amp;#34; ]] &amp;amp;&amp;amp; log ERROR &amp;#34;无效的卷ID&amp;#34; local st; st=$(openstack volume show -f value --column status &amp;#34;$vid&amp;#34;) case &amp;#34;$st&amp;#34; in available) count=$((count+1)) ;; error*) log ERROR &amp;#34;卷状态显示error, ID: $vid&amp;#34; ;; esac done [[ $count -eq ${#vol_ids[@]} ]] &amp;amp;&amp;amp; { echo ok; return 0; } sleep 30 done echo &amp;#34;None&amp;#34; return 0 } export_volume_types(){ &amp;gt; &amp;#34;$1&amp;#34; log INFO &amp;#34;正在导出卷类型列表&amp;#34; openstack volume type list -f value --column Name | grep -Ev &amp;#39;^(#|$)&amp;#39; &amp;gt; &amp;#34;$1&amp;#34; || echo &amp;#34;None&amp;#34; &amp;gt; &amp;#34;$1&amp;#34; } export_hypervisors(){ &amp;gt; &amp;#34;$1&amp;#34; log INFO &amp;#34;正在导出可用的宿主机列表&amp;#34; openstack compute service list -f value --service nova-compute \ | awk &amp;#39;$5 == &amp;#34;enabled&amp;#34; &amp;amp;&amp;amp; $6 == &amp;#34;up&amp;#34; {print $4&amp;#34;:&amp;#34;$3}&amp;#39; | grep -Ev &amp;#39;^(#|$)&amp;#39; &amp;gt; &amp;#34;$1&amp;#34; || echo &amp;#34;None&amp;#34; &amp;gt; &amp;#34;$1&amp;#34; } export_images(){ &amp;gt; &amp;#34;$1&amp;#34; log INFO &amp;#34;正在导出镜像列表&amp;#34; openstack image list -f value --column Name | grep -Ev &amp;#39;^(#|$)&amp;#39; &amp;gt; &amp;#34;$1&amp;#34; || echo &amp;#34;None&amp;#34; &amp;gt; &amp;#34;$1&amp;#34; } create_boot_volume(){ local name=$1 size=$2 image=$3 type=$4 [[ -z &amp;#34;$name&amp;#34; || -z &amp;#34;$size&amp;#34; || -z &amp;#34;$image&amp;#34; || -z &amp;#34;$type&amp;#34; ]] &amp;amp;&amp;amp; log ERROR &amp;#34;缺少卷创建参数&amp;#34; local vol_name=&amp;#34;${name}-sysvol&amp;#34; log INFO &amp;#34;创建启动卷: $vol_name&amp;#34; local opts=(--size &amp;#34;$size&amp;#34; --image &amp;#34;$(openstack image show -f value --column id &amp;#34;$image&amp;#34;)&amp;#34;) [[ &amp;#34;$type&amp;#34; !</description>
    </item>
    
    <item>
      <title>OpenStack build case</title>
      <link>https://gnail89.github.io/posts/openstack_build_case/</link>
      <pubDate>Mon, 28 Jul 2025 00:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/openstack_build_case/</guid>
      <description>软件环境 openEuler 22.03 Python 3.9.22 OpenStack 2025.1 软件版本上限约束 根据安装要求，选定软件版本限制范围。https://opendev.org/openstack/requirements 或者 https://releases.openstack.org/constraints/upper/2025.1 # e.g curl https://opendev.org/openstack/requirements/raw/branch/stable/2025.1/upper-constraints.txt 使用python虚拟环境 # 创建python虚拟测试环境 python3 -m venv /opt/openstack # 进入虚拟环境 source /opt/openstack/bin/activate # 退出虚拟环境 deactivate # 升级pip pip install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple 安装软件 # 检查组件版本release，确定版本信息 # https://releases.openstack.org/epoxy/index.html pip install keystone==27.0.0 nova==31.0.0 cinder==26.1.0 neutron==26.0.1 glance==30.0.0 horizon==25.3.0 ironic==29.0.3 swift==2.35.0 -i https://pypi.tuna.tsinghua.edu.cn/simple -c upper-constraints.txt # 下载离线包 pip download -d ~/packages/ keystone==27.0.0 nova==31.0.0 cinder==26.1.0 neutron==26.0.1 glance==30.0.0 horizon==25.3.0 ironic==29.0.3 swift==2.35.0 -i https://pypi.</description>
    </item>
    
    <item>
      <title>Python源码编译简要步骤</title>
      <link>https://gnail89.github.io/posts/python_source_build/</link>
      <pubDate>Mon, 28 Jul 2025 00:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/python_source_build/</guid>
      <description>软件版本 openEuler 22.03 openssl-1.1.1w.tar.gz Python-3.9.22.tgz openssl dnf install -y gcc gcc-c++ make perl perl-devel tar zxf openssl-1.1.1w.tar.gz ./config --prefix=/opt/openssl make &amp;amp;&amp;amp; make install Python dnf install -y bzip2-devel libffi-devel zlib-devel xz-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel libnsl2-devel uuid-devel ./configure --prefix=/opt/python-3.9.22 --with-openssl=/opt/openssl --enable-shared --enable-optimizations make &amp;amp;&amp;amp; make install </description>
    </item>
    
    <item>
      <title>AI写shell脚本</title>
      <link>https://gnail89.github.io/posts/vm_state_shell_ai/</link>
      <pubDate>Mon, 07 Jul 2025 00:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/vm_state_shell_ai/</guid>
      <description>AI写的SQL表结构 CREATE TABLE vms ( id INT NOT NULL AUTO_INCREMENT, location VARCHAR(255) NOT NULL, vm_uuid VARCHAR(36) NOT NULL, vm_name VARCHAR(255) NOT NULL, vm_state VARCHAR(255) DEFAULT NULL, power_state VARCHAR(36) DEFAULT NULL, vm_nets VARCHAR(255) DEFAULT NULL, flavor_name VARCHAR(255) DEFAULT NULL, flavor_id VARCHAR(36) DEFAULT NULL, availability_zone VARCHAR(255) DEFAULT NULL, vm_host VARCHAR(255) DEFAULT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, deleted_at TIMESTAMP DEFAULT NULL, is_deleted BOOLEAN DEFAULT FALSE, PRIMARY KEY (id) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci; CREATE TABLE vms_archive ( id INT NOT NULL, location VARCHAR(255) NOT NULL, vm_uuid VARCHAR(36) NOT NULL, vm_name VARCHAR(255) NOT NULL, vm_state VARCHAR(255) DEFAULT NULL, power_state VARCHAR(36) DEFAULT NULL, vm_nets VARCHAR(255) DEFAULT NULL, flavor_name VARCHAR(255) DEFAULT NULL, flavor_id VARCHAR(36) DEFAULT NULL, availability_zone VARCHAR(255) DEFAULT NULL, vm_host VARCHAR(255) DEFAULT NULL, created_at TIMESTAMP NOT NULL, updated_at TIMESTAMP NOT NULL, deleted_at TIMESTAMP DEFAULT NULL, is_deleted BOOLEAN DEFAULT FALSE, archive_batch TIMESTAMP NOT NULL, PRIMARY KEY (id, archive_batch), INDEX idx_vm_uuid (vm_uuid), INDEX idx_archive_batch (archive_batch), INDEX idx_vm_uuid_batch (vm_uuid, archive_batch), INDEX idx_active_time_batch (vm_state, archive_batch, vm_uuid) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci; AI写的SQL查询 #查询指定批次的差异。 SELECT cur.</description>
    </item>
    
    <item>
      <title>常用软件源repo</title>
      <link>https://gnail89.github.io/posts/setup_repo/</link>
      <pubDate>Wed, 05 Mar 2025 00:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/setup_repo/</guid>
      <description>python 加速 # 创建python虚拟测试环境 python3 -m venv /opt/test # 进入虚拟环境 source /opt/test/bin/activate # 退出虚拟环境 deactivate # 镜像加速地址： pip install sqlite -i https://pypi.tuna.tsinghua.edu.cn/simple -c ~/requirements_upper.txt docker-compose # install the Docker Compose standalone curl -SL https://github.com/docker/compose/releases/download/v2.33.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose docker-ce repo示例 # docker-ce/阿里云 dnf config-manager --add-repo=https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo docker 加速 # ref: https://github.com/DaoCloud/public-image-mirror # 添加到 /etc/docker/daemon.json { &amp;#34;registry-mirrors&amp;#34;: [ &amp;#34;https://docker.m.daocloud.io&amp;#34; ], &amp;#34;ipv6&amp;#34;: false, &amp;#34;fixed-cidr&amp;#34;: &amp;#34;10.10.0.0/24&amp;#34;, &amp;#34;bip&amp;#34;: &amp;#34;10.10.0.1/24&amp;#34;, &amp;#34;log-driver&amp;#34;: &amp;#34;json-file&amp;#34;, &amp;#34;log-opts&amp;#34;: { &amp;#34;max-size&amp;#34;: &amp;#34;100m&amp;#34;, &amp;#34;max-file&amp;#34;: &amp;#34;3&amp;#34; } } epel repo示例 # epel(RHEL 8) yum install -y https://mirrors.</description>
    </item>
    
    <item>
      <title>rsync升级简要步骤</title>
      <link>https://gnail89.github.io/posts/rsync_notes/</link>
      <pubDate>Mon, 03 Mar 2025 00:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/rsync_notes/</guid>
      <description>rsync升级简要步骤 编译环境: redhat 6.5 x86_64 # 安装依赖包 yum install gcc gcc-c++ make automake acl libacl-devel popt-devel # 配置，去除部分特性 ./configure --prefix=/opt/rsync \ --disable-openssl \ --disable-xxhash \ --disable-zstd \ --disable-lz4 # 编译 make &amp;amp;&amp;amp; make install # 将生成的二进制文件部署到指定路径下进行测试: /usr/bin/rsync </description>
    </item>
    
    <item>
      <title>OpenStack_notes</title>
      <link>https://gnail89.github.io/posts/openstack_notes/</link>
      <pubDate>Wed, 11 Dec 2024 11:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/openstack_notes/</guid>
      <description>OpenStack example # 将image镜像设置为vga显示驱动，以支持更大分辨率 openstack image set --property hw_video_model=vga image_id # 将volume卷设置为vga显示驱动，以支持更大分辨率（已有虚拟机需要重建） openstack volume set --image-property hw_video_model=vga volume_id </description>
    </item>
    
    <item>
      <title>AIPerf 基准测试工具安装</title>
      <link>https://gnail89.github.io/posts/aiperf-setup/</link>
      <pubDate>Thu, 28 Nov 2024 15:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/aiperf-setup/</guid>
      <description>开源项目地址: https://github.com/thu-pacman/AIPerf
基础环境 SSH免密 ssh-keygen -t rsa ssh-copy-id -i ~/.ssh/id_rsa.pub server-ip 部署NFS 安装软件包 yum install -y nfs-utils 配置服务端 mkdir /userhome chmod -R 777 /userhome echo &amp;#34;/userhome *(rw,sync,insecure,no_root_squash)&amp;#34; &amp;gt;&amp;gt; /etc/exports # 启动服务 systemctl enable --now nfs-server systemctl status nfs-server 配置客户端 mkdir /userhome mount server-ip:/userhome /userhome 准备数据集 数据集下载 Imagenet官方地址：http://www.image-net.org/index 使用ImageNet-2012数据集 cd /userhome/AIPerf/scripts/build_data ./download_imagenet.sh ls ./imagenet 原始的ImageNet-2012包含以下两个文件: ILSVRC2012_img_val.tar ILSVRC2012_img_train.tar TFReord制作 训练集和验证集需要按照1000个子目录下包含图片的格式，处理步骤： 将train 和 val 的数据按照文件夹分类 指定参数运行build_imagenet_data.py # 做验证集 cd /userhome/AIPerf/scripts/build_data mkdir -p ILSVRC2012/raw-data/imagenet-data/validation/ tar -xvf imagenet/ILSVRC2012_img_val.</description>
    </item>
    
    <item>
      <title>NFS笔记</title>
      <link>https://gnail89.github.io/posts/nfs-optimize/</link>
      <pubDate>Tue, 14 May 2024 00:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/nfs-optimize/</guid>
      <description>NFS Server笔记 exports配置 # ro # 只读 # rw # 读写 # sync # 同步写入资料到内存与硬盘中 # async # 资料会先暂存于内存中，而非直接写入硬盘 # secure # NFS通过1024以下的安全TCP/IP端口发送 # insecure # NFS通过1024以上的端口发送 # wdelay #如果多个用户要写入NFS目录，则归组写入（默认） # no_wdelay # 如果多个用户要写入NFS目录，则立即写入，当使用async时，无需此设置。 # hide # 在NFS共享目录中不共享其子目录 # no_hide # 共享NFS目录的子目录 # subtree_check # 如果共享/usr/bin之类的子目录时，强制NFS检查父目录的权限 # no_subtree_check # 同上，但不检查父目录权限 # all_squash # 将所有共享文件的UID和GID映射匿名用户anonymous，适合公用目录。 # no_all_squash # 保留共享文件的UID和GID（默认） # root_squash # root用户的所有请求映射成如anonymous用户一样的权限（默认） # no_root_squash # root用户具有根目录的完全管理访问权限 # anonuid=xxx # 指定NFS服务器/etc/passwd文件中匿名用户的UID # anongid=xxx # 指定NFS服务器/etc/passwd文件中匿名用户的GID # cat /etc/exports /nfs 192.</description>
    </item>
    
    <item>
      <title>OpenSSH 9.3p1编译安装,链接OpenSSL 1.1.1t静态库</title>
      <link>https://gnail89.github.io/posts/openssh_upgrade/</link>
      <pubDate>Tue, 28 Mar 2023 11:19:24 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/openssh_upgrade/</guid>
      <description>1. 软件版本： OS: Anolis OS release 8.8 SSH: openssh-9.3p1.tar.gz SSL: openssl-1.1.1t.tar.gz 2. 安装基础依赖包 dnf install -y gcc gcc-c++ make zlib zlib-devel pam pam-devel tar 3. 手动编译OpenSSL # 解压缩 tar zxf openssl-1.1.1t.tar.gz cd openssl-1.1.1t # 编译安装 ./config --prefix=/opt/openssl/ make &amp;amp;&amp;amp; make install 安装目录结构 /opt/openssl/ ├── bin │ ├── c_rehash │ └── openssl ├── include │ └── openssl ├── lib │ ├── engines-1.1 │ ├── libcrypto.a │ ├── libcrypto.so -&amp;gt; libcrypto.so.1.1 │ ├── libcrypto.</description>
    </item>
    
    <item>
      <title>硬盘驱动器与物理硬盘对应关系</title>
      <link>https://gnail89.github.io/posts/find-disk-slot/</link>
      <pubDate>Tue, 06 Dec 2022 19:41:40 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/find-disk-slot/</guid>
      <description>如何确定硬盘驱动器与smartctl、MegaRAID之间的对应关系</description>
    </item>
    
    <item>
      <title>SSH Security</title>
      <link>https://gnail89.github.io/posts/ssh-security/</link>
      <pubDate>Tue, 22 Nov 2022 23:34:25 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/ssh-security/</guid>
      <description>分享ssh安全配置实践
1. openssh基本配置 关注安全漏洞信息，定期升级ssh1版本，关键参数配置参考：
cat /etc/ssh/sshd_config Port 22 # 建议更改默认端口 Protocol 2 PermitRootLogin no MaxAuthTries 3 PubkeyAuthentication yes PermitEmptyPasswords no PasswordAuthentication no UsePAM yes X11Forwarding no PrintMotd no ClientAliveInterval 180 ClientAliveCountMax 0 UseDNS no Banner /etc/ssh_banner AllowUsers username 2. 使用PAM模块锁定账户 PAM2模块，pam_tally2和pam_faillock模块功能相似，以pam_faillock模块为例：
cat /etc/pam.d/password-auth #%PAM-1.0 # This file is auto-generated. # User changes will be destroyed the next time authselect is run. auth required pam_env.so auth required pam_faillock.so deny=3 unlock_time=900 even_deny_root root_unlock_time=900 auth sufficient pam_unix.</description>
    </item>
    
  </channel>
</rss>
