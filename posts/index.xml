<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 📕W.&#39;s Blog</title>
    <link>https://gnail89.github.io/posts/</link>
    <description>Recent content in Posts on 📕W.&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Mar 2023 15:20:54 +0800</lastBuildDate><atom:link href="https://gnail89.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Start</title>
      <link>https://gnail89.github.io/posts/start-hugo/</link>
      <pubDate>Sat, 19 Nov 2022 23:51:58 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/start-hugo/</guid>
      <description>1. 概述 无意间发现了Hugo，尝试后发现效果不错，同时把过程记录下来，主要有以下几部分组成：
Hugo v0.106 hugo-PaperMod v6.0 Github Pages Github Actions 2. 实现过程 Hugo Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。Hugo获取源文件和模板，并将它们作为输入来创建一个完整的html网站。
二进制安装Hugo 到 Hugo Releases 下载对应的操作系统版本的Hugo二进制文件。
生成站点 使用Hugo快速生成站点，初始文件都生成在目录里/path/to/site，配置文件格式为yaml。
hugo new site /path/to/site --format yaml 自动生成文件夹内容如下：
. ├── archetypes │ └── default.md ├── config.yaml ├── content ├── data ├── layouts ├── static └── themes 切换到站点目录
cd /path/to/site 创建第一篇文章 posts文件夹会自动创建
hugo new posts/about.md 自动生成文件到路径下content/posts/about.md，文件初始内容为：
--- date: 2022-11-19T23:51:58+08:00 draft: false title: &amp;#34;about&amp;#34; --- # 在文末输入正文内容，以markdown格式 安装主题 到官网Hugo Themes选择心仪的主题。比如PaperMod，找到PaperMod Releases下载源码包。解压到themes目录下。</description>
    </item>
    
    <item>
      <title>Cobbler基础</title>
      <link>https://gnail89.github.io/posts/cobbler_setup/</link>
      <pubDate>Wed, 08 Mar 2023 15:20:54 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/cobbler_setup/</guid>
      <description>待完成 </description>
    </item>
    
    <item>
      <title>git基础</title>
      <link>https://gnail89.github.io/posts/git-basics/</link>
      <pubDate>Thu, 15 Dec 2022 15:16:53 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/git-basics/</guid>
      <description>待完成 </description>
    </item>
    
    <item>
      <title>硬盘驱动器与物理硬盘对应关系</title>
      <link>https://gnail89.github.io/posts/find-disk-slot/</link>
      <pubDate>Tue, 06 Dec 2022 19:41:40 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/find-disk-slot/</guid>
      <description>如何确定硬盘驱动器与smartctl、MegaRAID之间的对应关系</description>
    </item>
    
    <item>
      <title>SSH Security</title>
      <link>https://gnail89.github.io/posts/ssh-security/</link>
      <pubDate>Tue, 22 Nov 2022 23:34:25 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/ssh-security/</guid>
      <description>分享ssh安全配置实践
1. openssh基本配置 关注安全漏洞信息，定期升级ssh1版本，关键参数配置参考：
cat /etc/ssh/sshd_config Port 22 # 建议更改默认端口 Protocol 2 PermitRootLogin no MaxAuthTries 3 PubkeyAuthentication yes PermitEmptyPasswords no PasswordAuthentication no UsePAM yes X11Forwarding no PrintMotd no ClientAliveInterval 180 ClientAliveCountMax 0 UseDNS no Banner /etc/ssh_banner AllowUsers username 2. 使用PAM模块锁定账户 PAM2模块，pam_tally2和pam_faillock模块功能相似，以pam_faillock模块为例：
cat /etc/pam.d/password-auth #%PAM-1.0 # This file is auto-generated. # User changes will be destroyed the next time authselect is run. auth required pam_env.so auth required pam_faillock.so deny=3 unlock_time=900 even_deny_root root_unlock_time=900 auth sufficient pam_unix.</description>
    </item>
    
    <item>
      <title>Install Ceph Octopus With Cephadm</title>
      <link>https://gnail89.github.io/posts/install-ceph-octopus-with-cephadm/</link>
      <pubDate>Tue, 22 Nov 2022 17:24:19 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/install-ceph-octopus-with-cephadm/</guid>
      <description>1. 环境信息 CentOS 7 禁用firewalld 禁用selinux 时钟同步 设置主机名 ip addr hostname 192.168.61.129 ceph-node01 192.168.61.130 ceph-node02 192.168.61.131 ceph-node03 2. 安装依赖包 所有节点都需要安装
安装epel和elrepo软件源 yum install -y epel-release elrepo-release 安装python3 yum install -y python3 升级kernel至最新 yum --enablerepo=elrepo-kernel install -y kernel-ml # 设置默认使用的内核 grubby --default-index grubby --info=ALL grubby --set-default-index=0 安装docker-ce软件源 cd /etc/yum.repos.d/ curl --remote-name https://download.docker.com/linux/centos/docker-ce.repo 安装最新版本docker yum install -y docker-ce systemctl start docker systemctl enable docker 重启生效 3. 安装cephadm curl --remote-name --location https://mirrors.tuna.tsinghua.edu.cn/ceph/rpm-octopus/elnoarch/cephadm chmod +x .</description>
    </item>
    
    <item>
      <title>Markdown基本语法</title>
      <link>https://gnail89.github.io/posts/markdown/</link>
      <pubDate>Sun, 20 Nov 2022 15:37:06 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/markdown/</guid>
      <description>1. 基本语法 Markdown语法主要分类: 标题, 段落, 区块引用, 代码区块, 强调, 列表, 分割线, 链接, 图片, 反斜杠\, 符号&amp;rsquo;`&#39; 标题 使用=和-符号标记一级和二级标题 这是一级标题 ========== 这是二级标题 ---------- 使用#符号，可以表示1-6级标题 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 段落 段落内强制换行使用两个以上空格加上回车, 引用中换行可省略回车 区块引用 在段落的每行或只在第一行使用符号&amp;gt;,还可使用多个嵌套引用 &amp;gt; 区块引用 &amp;gt;&amp;gt; 嵌套引用 代码区块 代码区块的建立是在每行加上4个空格或者一个制表符 注意:需要和普通段落之间存在空行。
void main() { printf(&amp;quot;Hello, Markdown.&amp;quot;); } 强调 在强调内容两侧分别加上*或者_ *斜体* _斜体_ **粗体** __粗体__ ***斜体加粗*** ~~删除线~~ 列表 使用星号*,加号+,减号-标记无序列表 * 无序列表文字 * 无序列表文字 * 无序列表文字 + 无序列表文字 + 无序列表文字 + 无序列表文字 - 无序列表文字 - 无序列表文字 - 无序列表文字 有序列表的标记方式是将上述的符号换成数字,并加上英文句号.</description>
    </item>
    
    <item>
      <title>网站收藏夹</title>
      <link>https://gnail89.github.io/posts/website-favorites/</link>
      <pubDate>Sun, 20 Nov 2022 03:25:12 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/website-favorites/</guid>
      <description>教程 Markdown 教程 Pro Git 2 简体中文
git在线学习工具
菜鸟教程
Linux命令大全
鸟哥教程
工具 开源中国在线工具
菜鸟教程在线工具
程序员在线工具
脚本之家在线工具
w3cschool在线工具
在线压缩转换工具
码云开源项目推荐列表
博客 Java全栈知识体系 </description>
    </item>
    
  </channel>
</rss>
