<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ðŸ“•W.&#39;s Blog</title>
    <link>https://gnail89.github.io/</link>
    <description>Recent content on ðŸ“•W.&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Nov 2022 20:52:28 +0800</lastBuildDate><atom:link href="https://gnail89.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Test6</title>
      <link>https://gnail89.github.io/posts/test6/</link>
      <pubDate>Sat, 19 Nov 2022 20:52:28 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/test6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Test1</title>
      <link>https://gnail89.github.io/posts/20221119/test1/</link>
      <pubDate>Sat, 19 Nov 2022 19:46:31 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/20221119/test1/</guid>
      <description>1 2 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;time&amp;#34; ) type Moo struct { Cow int Sound string Tube chan bool } // A cow will moo until it is being fed func cow(num int, mootube chan Moo) { tube := make(chan bool) for { select { case mootube &amp;lt;- Moo{num, &amp;#34;moo&amp;#34;, tube}: fmt.Println(&amp;#34;Cow number&amp;#34;, num, &amp;#34;mooed through the mootube&amp;#34;) &amp;lt;-tube fmt.Println(&amp;#34;Cow number&amp;#34;, num, &amp;#34;is being fed and stops mooing&amp;#34;) mootube &amp;lt;- Moo{num, &amp;#34;mooh&amp;#34;, nil} fmt.</description>
    </item>
    
    <item>
      <title>Test3</title>
      <link>https://gnail89.github.io/posts/test3/</link>
      <pubDate>Sat, 19 Nov 2022 18:59:41 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/test3/</guid>
      <description>1 2 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;time&amp;#34; ) type Moo struct { Cow int Sound string Tube chan bool } // A cow will moo until it is being fed func cow(num int, mootube chan Moo) { tube := make(chan bool) for { select { case mootube &amp;lt;- Moo{num, &amp;#34;moo&amp;#34;, tube}: fmt.Println(&amp;#34;Cow number&amp;#34;, num, &amp;#34;mooed through the mootube&amp;#34;) &amp;lt;-tube fmt.Println(&amp;#34;Cow number&amp;#34;, num, &amp;#34;is being fed and stops mooing&amp;#34;) mootube &amp;lt;- Moo{num, &amp;#34;mooh&amp;#34;, nil} fmt.</description>
    </item>
    
    <item>
      <title>Test2</title>
      <link>https://gnail89.github.io/posts/test2/</link>
      <pubDate>Sat, 19 Nov 2022 18:58:29 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/test2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hello Word</title>
      <link>https://gnail89.github.io/posts/hello-word/</link>
      <pubDate>Sat, 19 Nov 2022 10:17:22 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/hello-word/</guid>
      <description>title 1 title 2 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;time&amp;#34; ) type Moo struct { Cow int Sound string Tube chan bool } // A cow will moo until it is being fed func cow(num int, mootube chan Moo) { tube := make(chan bool) for { select { case mootube &amp;lt;- Moo{num, &amp;#34;moo&amp;#34;, tube}: fmt.Println(&amp;#34;Cow number&amp;#34;, num, &amp;#34;mooed through the mootube&amp;#34;) &amp;lt;-tube fmt.Println(&amp;#34;Cow number&amp;#34;, num, &amp;#34;is being fed and stops mooing&amp;#34;) mootube &amp;lt;- Moo{num, &amp;#34;mooh&amp;#34;, nil} fmt.</description>
    </item>
    
    
    
  </channel>
</rss>
