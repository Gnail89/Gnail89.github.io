<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>📕W.&#39;s Blog</title>
    <link>https://gnail89.github.io/</link>
    <description>Recent content on 📕W.&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 12 Aug 2025 00:00:00 +0800</lastBuildDate><atom:link href="https://gnail89.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Start</title>
      <link>https://gnail89.github.io/posts/start-hugo/</link>
      <pubDate>Sat, 19 Nov 2022 23:51:58 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/start-hugo/</guid>
      <description>1. 概述 无意间发现了Hugo，尝试后发现效果不错，同时把过程记录下来，主要有以下几部分组成：
Hugo v0.106 hugo-PaperMod v6.0 Github Pages Github Actions 2. 实现过程 Hugo Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。Hugo获取源文件和模板，并将它们作为输入来创建一个完整的html网站。
二进制安装Hugo 到 Hugo Releases 下载对应的操作系统版本的Hugo二进制文件。
生成站点 使用Hugo快速生成站点，初始文件都生成在目录里/path/to/site，配置文件格式为yaml。
hugo new site /path/to/site --format yaml 自动生成文件夹内容如下：
. ├── archetypes │ └── default.md ├── config.yaml ├── content ├── data ├── layouts ├── static └── themes 切换到站点目录
cd /path/to/site 创建第一篇文章 posts文件夹会自动创建
hugo new posts/about.md 自动生成文件到路径下content/posts/about.md，文件初始内容为：
--- date: 2022-11-19T23:51:58+08:00 draft: false title: &amp;#34;about&amp;#34; --- # 在文末输入正文内容，以markdown格式 安装主题 到官网Hugo Themes选择心仪的主题。比如PaperMod，找到PaperMod Releases下载源码包。解压到themes目录下。</description>
    </item>
    
    <item>
      <title>Openstack_mk_vm</title>
      <link>https://gnail89.github.io/posts/openstack_mk_vm/</link>
      <pubDate>Tue, 12 Aug 2025 00:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/openstack_mk_vm/</guid>
      <description>引导虚拟机实例简单流程(AI) #!/bin/bash set -Eeuo pipefail basepath=$(cd `dirname $0`;pwd) readonly VM_FORMAT_FILE=&amp;#34;vm_info_format.txt&amp;#34; readonly HYPERVISOR_FILE=&amp;#34;env_available_host_list.txt&amp;#34; readonly VOL_TYPE_FILE=&amp;#34;env_cinder_volume_type.txt&amp;#34; readonly IMAGES_FILE=&amp;#34;env_image_list.txt&amp;#34; readonly DATA_SEPARATOR=&amp;#34;+&amp;#34; readonly MAX_PARALLEL=2 log() { local lvl=&amp;#34;$1&amp;#34; msg=&amp;#34;$2&amp;#34; printf &amp;#34;%s [%4s] %s\n&amp;#34; &amp;#34;$(date +&amp;#39;%F %T&amp;#39;)&amp;#34; &amp;#34;$lvl&amp;#34; &amp;#34;$msg&amp;#34; &amp;gt;&amp;amp;2 [[ &amp;#34;$lvl&amp;#34; == &amp;#34;ERROR&amp;#34; ]] &amp;amp;&amp;amp; exit 1 return 0 } trap &amp;#39;log ERROR &amp;#34;Script aborted in $FUNCNAME at line $LINENO&amp;#34;&amp;#39; ERR require_cmd() { command -v &amp;#34;$1&amp;#34; &amp;amp;&amp;gt;/dev/null || log ERROR &amp;#34;缺少命令: $1&amp;#34;;} init_deps() { for cmd in openstack nova awk grep sed tee; do require_cmd &amp;#34;$cmd&amp;#34;; done; } check_volumes(){ local retries=$1 count=0 vol_ids=(&amp;#34;${@:2}&amp;#34;) for ((i=0; i&amp;lt;retries; i++)); do count=0 for vid in &amp;#34;${vol_ids[@]}&amp;#34;; do [[ -z &amp;#34;$vid&amp;#34; || &amp;#34;$vid&amp;#34; == &amp;#34;None&amp;#34; ]] &amp;amp;&amp;amp; log ERROR &amp;#34;无效的卷ID&amp;#34; local st; st=$(openstack volume show -f value --column status &amp;#34;$vid&amp;#34;) case &amp;#34;$st&amp;#34; in available) count=$((count+1)) ;; error*) log ERROR &amp;#34;卷状态显示error, ID: $vid&amp;#34; ;; esac done [[ $count -eq ${#vol_ids[@]} ]] &amp;amp;&amp;amp; { echo ok; return 0; } sleep 30 done echo &amp;#34;None&amp;#34; return 0 } export_volume_types(){ &amp;gt; &amp;#34;$1&amp;#34; log INFO &amp;#34;正在导出卷类型列表&amp;#34; openstack volume type list -f value --column Name | grep -Ev &amp;#39;^(#|$)&amp;#39; &amp;gt; &amp;#34;$1&amp;#34; || echo &amp;#34;None&amp;#34; &amp;gt; &amp;#34;$1&amp;#34; } export_hypervisors(){ &amp;gt; &amp;#34;$1&amp;#34; log INFO &amp;#34;正在导出可用的宿主机列表&amp;#34; openstack compute service list -f value --service nova-compute \ | awk &amp;#39;$5 == &amp;#34;enabled&amp;#34; &amp;amp;&amp;amp; $6 == &amp;#34;up&amp;#34; {print $4&amp;#34;:&amp;#34;$3}&amp;#39; | grep -Ev &amp;#39;^(#|$)&amp;#39; &amp;gt; &amp;#34;$1&amp;#34; || echo &amp;#34;None&amp;#34; &amp;gt; &amp;#34;$1&amp;#34; } export_images(){ &amp;gt; &amp;#34;$1&amp;#34; log INFO &amp;#34;正在导出镜像列表&amp;#34; openstack image list -f value --column Name | grep -Ev &amp;#39;^(#|$)&amp;#39; &amp;gt; &amp;#34;$1&amp;#34; || echo &amp;#34;None&amp;#34; &amp;gt; &amp;#34;$1&amp;#34; } create_boot_volume(){ local name=$1 size=$2 image=$3 type=$4 [[ -z &amp;#34;$name&amp;#34; || -z &amp;#34;$size&amp;#34; || -z &amp;#34;$image&amp;#34; || -z &amp;#34;$type&amp;#34; ]] &amp;amp;&amp;amp; log ERROR &amp;#34;缺少卷创建参数&amp;#34; local vol_name=&amp;#34;${name}-sysvol&amp;#34; log INFO &amp;#34;创建启动卷: $vol_name&amp;#34; local opts=(--size &amp;#34;$size&amp;#34; --image &amp;#34;$(openstack image show -f value --column id &amp;#34;$image&amp;#34;)&amp;#34;) [[ &amp;#34;$type&amp;#34; !</description>
    </item>
    
    <item>
      <title>OpenStack build case</title>
      <link>https://gnail89.github.io/posts/openstack_build_case/</link>
      <pubDate>Mon, 28 Jul 2025 00:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/openstack_build_case/</guid>
      <description>软件环境 openEuler 22.03 Python 3.9.22 OpenStack 2025.1 软件版本上限约束 根据安装要求，选定软件版本限制范围。https://opendev.org/openstack/requirements 或者 https://releases.openstack.org/constraints/upper/2025.1 # e.g curl https://opendev.org/openstack/requirements/raw/branch/stable/2025.1/upper-constraints.txt 使用python虚拟环境 # 创建python虚拟测试环境 python3 -m venv /opt/openstack # 进入虚拟环境 source /opt/openstack/bin/activate # 退出虚拟环境 deactivate # 升级pip pip install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple 安装软件 # 检查组件版本release，确定版本信息 # https://releases.openstack.org/epoxy/index.html pip install keystone==27.0.0 nova==31.0.0 cinder==26.1.0 neutron==26.0.1 glance==30.0.0 horizon==25.3.0 ironic==29.0.3 swift==2.35.0 -i https://pypi.tuna.tsinghua.edu.cn/simple -c upper-constraints.txt # 下载离线包 pip download -d ~/packages/ keystone==27.0.0 nova==31.0.0 cinder==26.1.0 neutron==26.0.1 glance==30.0.0 horizon==25.3.0 ironic==29.0.3 swift==2.35.0 -i https://pypi.</description>
    </item>
    
    <item>
      <title>Python源码编译简要步骤</title>
      <link>https://gnail89.github.io/posts/python_source_build/</link>
      <pubDate>Mon, 28 Jul 2025 00:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/python_source_build/</guid>
      <description>软件版本 openEuler 22.03 openssl-1.1.1w.tar.gz Python-3.9.22.tgz openssl dnf install -y gcc gcc-c++ make perl perl-devel tar zxf openssl-1.1.1w.tar.gz ./config --prefix=/opt/openssl make &amp;amp;&amp;amp; make install Python dnf install -y bzip2-devel libffi-devel zlib-devel xz-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel libnsl2-devel uuid-devel ./configure --prefix=/opt/python-3.9.22 --with-openssl=/opt/openssl --enable-shared --enable-optimizations make &amp;amp;&amp;amp; make install </description>
    </item>
    
    <item>
      <title>AI写shell脚本</title>
      <link>https://gnail89.github.io/posts/vm_state_shell_ai/</link>
      <pubDate>Mon, 07 Jul 2025 00:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/vm_state_shell_ai/</guid>
      <description>AI写的SQL表结构 CREATE TABLE vms ( id INT NOT NULL AUTO_INCREMENT, location VARCHAR(255) NOT NULL, vm_uuid VARCHAR(36) NOT NULL, vm_name VARCHAR(255) NOT NULL, vm_state VARCHAR(255) DEFAULT NULL, power_state VARCHAR(36) DEFAULT NULL, vm_nets VARCHAR(255) DEFAULT NULL, flavor_name VARCHAR(255) DEFAULT NULL, flavor_id VARCHAR(36) DEFAULT NULL, availability_zone VARCHAR(255) DEFAULT NULL, vm_host VARCHAR(255) DEFAULT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, deleted_at TIMESTAMP DEFAULT NULL, is_deleted BOOLEAN DEFAULT FALSE, PRIMARY KEY (id) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci; CREATE TABLE vms_archive ( id INT NOT NULL, location VARCHAR(255) NOT NULL, vm_uuid VARCHAR(36) NOT NULL, vm_name VARCHAR(255) NOT NULL, vm_state VARCHAR(255) DEFAULT NULL, power_state VARCHAR(36) DEFAULT NULL, vm_nets VARCHAR(255) DEFAULT NULL, flavor_name VARCHAR(255) DEFAULT NULL, flavor_id VARCHAR(36) DEFAULT NULL, availability_zone VARCHAR(255) DEFAULT NULL, vm_host VARCHAR(255) DEFAULT NULL, created_at TIMESTAMP NOT NULL, updated_at TIMESTAMP NOT NULL, deleted_at TIMESTAMP DEFAULT NULL, is_deleted BOOLEAN DEFAULT FALSE, archive_batch TIMESTAMP NOT NULL, PRIMARY KEY (id, archive_batch), INDEX idx_vm_uuid (vm_uuid), INDEX idx_archive_batch (archive_batch), INDEX idx_vm_uuid_batch (vm_uuid, archive_batch), INDEX idx_active_time_batch (vm_state, archive_batch, vm_uuid) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci; AI写的SQL查询 #查询指定批次的差异。 SELECT cur.</description>
    </item>
    
    <item>
      <title>常用软件源repo</title>
      <link>https://gnail89.github.io/posts/setup_repo/</link>
      <pubDate>Wed, 05 Mar 2025 00:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/setup_repo/</guid>
      <description>python 加速 # 创建python虚拟测试环境 python3 -m venv /opt/test # 进入虚拟环境 source /opt/test/bin/activate # 退出虚拟环境 deactivate # 镜像加速地址： pip install sqlite -i https://pypi.tuna.tsinghua.edu.cn/simple -c ~/requirements_upper.txt docker-compose # install the Docker Compose standalone curl -SL https://github.com/docker/compose/releases/download/v2.33.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose docker-ce repo示例 # docker-ce/阿里云 dnf config-manager --add-repo=https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo docker 加速 # ref: https://github.com/DaoCloud/public-image-mirror # 添加到 /etc/docker/daemon.json { &amp;#34;registry-mirrors&amp;#34;: [ &amp;#34;https://docker.m.daocloud.io&amp;#34; ], &amp;#34;ipv6&amp;#34;: false, &amp;#34;fixed-cidr&amp;#34;: &amp;#34;10.10.0.0/24&amp;#34;, &amp;#34;bip&amp;#34;: &amp;#34;10.10.0.1/24&amp;#34;, &amp;#34;log-driver&amp;#34;: &amp;#34;json-file&amp;#34;, &amp;#34;log-opts&amp;#34;: { &amp;#34;max-size&amp;#34;: &amp;#34;100m&amp;#34;, &amp;#34;max-file&amp;#34;: &amp;#34;3&amp;#34; } } epel repo示例 # epel(RHEL 8) yum install -y https://mirrors.</description>
    </item>
    
    <item>
      <title>rsync升级简要步骤</title>
      <link>https://gnail89.github.io/posts/rsync_notes/</link>
      <pubDate>Mon, 03 Mar 2025 00:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/rsync_notes/</guid>
      <description>rsync升级简要步骤 编译环境: redhat 6.5 x86_64 # 安装依赖包 yum install gcc gcc-c++ make automake acl libacl-devel popt-devel # 配置，去除部分特性 ./configure --prefix=/opt/rsync \ --disable-openssl \ --disable-xxhash \ --disable-zstd \ --disable-lz4 # 编译 make &amp;amp;&amp;amp; make install # 将生成的二进制文件部署到指定路径下进行测试: /usr/bin/rsync </description>
    </item>
    
    <item>
      <title>OpenStack_notes</title>
      <link>https://gnail89.github.io/posts/openstack_notes/</link>
      <pubDate>Wed, 11 Dec 2024 11:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/openstack_notes/</guid>
      <description>OpenStack example # 将image镜像设置为vga显示驱动，以支持更大分辨率 openstack image set --property hw_video_model=vga image_id # 将volume卷设置为vga显示驱动，以支持更大分辨率（已有虚拟机需要重建） openstack volume set --image-property hw_video_model=vga volume_id </description>
    </item>
    
    <item>
      <title>CVE-1999-0524</title>
      <link>https://gnail89.github.io/posts/cve-1999-0524/</link>
      <pubDate>Thu, 05 Dec 2024 11:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/cve-1999-0524/</guid>
      <description>ICMP Timestamp Request Remote Date Disclosure Synopsis It is possible to determine the exact time set on the remote host.
Description The remote host answers to an ICMP timestamp request. This allows an attacker to know the date that is set on the targeted machine, which may assist an unauthenticated, remote attacker in defeating time-based authentication protocols.
Timestamps returned from machines running Windows Vista / 7 / 2008 / 2008 R2 are deliberately incorrect, but usually within 1000 seconds of the actual system time.</description>
    </item>
    
    <item>
      <title>AIPerf 基准测试工具安装</title>
      <link>https://gnail89.github.io/posts/aiperf-setup/</link>
      <pubDate>Thu, 28 Nov 2024 15:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/aiperf-setup/</guid>
      <description>开源项目地址: https://github.com/thu-pacman/AIPerf
基础环境 SSH免密 ssh-keygen -t rsa ssh-copy-id -i ~/.ssh/id_rsa.pub server-ip 部署NFS 安装软件包 yum install -y nfs-utils 配置服务端 mkdir /userhome chmod -R 777 /userhome echo &amp;#34;/userhome *(rw,sync,insecure,no_root_squash)&amp;#34; &amp;gt;&amp;gt; /etc/exports # 启动服务 systemctl enable --now nfs-server systemctl status nfs-server 配置客户端 mkdir /userhome mount server-ip:/userhome /userhome 准备数据集 数据集下载 Imagenet官方地址：http://www.image-net.org/index 使用ImageNet-2012数据集 cd /userhome/AIPerf/scripts/build_data ./download_imagenet.sh ls ./imagenet 原始的ImageNet-2012包含以下两个文件: ILSVRC2012_img_val.tar ILSVRC2012_img_train.tar TFReord制作 训练集和验证集需要按照1000个子目录下包含图片的格式，处理步骤： 将train 和 val 的数据按照文件夹分类 指定参数运行build_imagenet_data.py # 做验证集 cd /userhome/AIPerf/scripts/build_data mkdir -p ILSVRC2012/raw-data/imagenet-data/validation/ tar -xvf imagenet/ILSVRC2012_img_val.</description>
    </item>
    
    <item>
      <title>Kubectl notes</title>
      <link>https://gnail89.github.io/posts/kubectl-notes/</link>
      <pubDate>Fri, 06 Sep 2024 15:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/kubectl-notes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>docker-ce二进制安装</title>
      <link>https://gnail89.github.io/posts/docker-ce-static/</link>
      <pubDate>Tue, 11 Jun 2024 16:45:33 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/docker-ce-static/</guid>
      <description>安装步骤 下载二进制包 # docker-ce 26.1.3 curl -O https://mirrors.ustc.edu.cn/docker-ce/linux/static/stable/x86_64/docker-26.1.3.tgz # cri-dockerd 0.3.10 curl -O https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.10/cri-dockerd-0.3.10.amd64.tgz 部署docker-ce # 解压缩 tar zxf docker-26.1.3.tgz # 复制二进制文件 cp docker/* /usr/bin/ 配置containerd.service文件 cat &amp;gt;/etc/systemd/system/containerd.service &amp;lt;&amp;lt;EOF [Unit] Description=containerd container runtime Documentation=https://containerd.io After=network.target local-fs.target [Service] ExecStartPre=-/sbin/modprobe overlay ExecStart=/usr/bin/containerd Type=notify Delegate=yes KillMode=process Restart=always RestartSec=5 LimitNPROC=infinity LimitCORE=infinity LimitNOFILE=1048576 TasksMax=infinity OOMScoreAdjust=-999 [Install] WantedBy=multi-user.target EOF # 设置开机自启 systemctl enable --now containerd.service 配置docker.service文件 cat &amp;gt; /etc/systemd/system/docker.service &amp;lt;&amp;lt;EOF [Unit] Description=Docker Application Container Engine Documentation=https://docs.docker.com After=network-online.</description>
    </item>
    
    <item>
      <title>Windows Enable TLSv1.2 And Other Disable</title>
      <link>https://gnail89.github.io/posts/windows-security-for-ssl/</link>
      <pubDate>Mon, 03 Jun 2024 16:46:24 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/windows-security-for-ssl/</guid>
      <description>Enable TLSv1.2 Registry Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2] [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server] &amp;#34;Enabled&amp;#34;=dword:00000001 &amp;#34;DisabledByDefault&amp;#34;=dword:00000000 [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client] &amp;#34;Enabled&amp;#34;=dword:00000001 &amp;#34;DisabledByDefault&amp;#34;=dword:00000000 Powershell New-Item &amp;#39;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server&amp;#39; -Force | Out-Null New-ItemProperty -path &amp;#39;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server&amp;#39; -name &amp;#39;Enabled&amp;#39; -value &amp;#39;1&amp;#39; -PropertyType &amp;#39;DWord&amp;#39; -Force | Out-Null New-ItemProperty -path &amp;#39;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server&amp;#39; -name &amp;#39;DisabledByDefault&amp;#39; -value 0 -PropertyType &amp;#39;DWord&amp;#39; -Force | Out-Null New-Item &amp;#39;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client&amp;#39; -Force | Out-Null New-ItemProperty -path &amp;#39;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client&amp;#39; -name &amp;#39;Enabled&amp;#39; -value &amp;#39;1&amp;#39; -PropertyType &amp;#39;DWord&amp;#39; -Force | Out-Null New-ItemProperty -path &amp;#39;HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.</description>
    </item>
    
    <item>
      <title>NFS笔记</title>
      <link>https://gnail89.github.io/posts/nfs-optimize/</link>
      <pubDate>Tue, 14 May 2024 00:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/nfs-optimize/</guid>
      <description>NFS Server笔记 exports配置 # ro # 只读 # rw # 读写 # sync # 同步写入资料到内存与硬盘中 # async # 资料会先暂存于内存中，而非直接写入硬盘 # secure # NFS通过1024以下的安全TCP/IP端口发送 # insecure # NFS通过1024以上的端口发送 # wdelay #如果多个用户要写入NFS目录，则归组写入（默认） # no_wdelay # 如果多个用户要写入NFS目录，则立即写入，当使用async时，无需此设置。 # hide # 在NFS共享目录中不共享其子目录 # no_hide # 共享NFS目录的子目录 # subtree_check # 如果共享/usr/bin之类的子目录时，强制NFS检查父目录的权限 # no_subtree_check # 同上，但不检查父目录权限 # all_squash # 将所有共享文件的UID和GID映射匿名用户anonymous，适合公用目录。 # no_all_squash # 保留共享文件的UID和GID（默认） # root_squash # root用户的所有请求映射成如anonymous用户一样的权限（默认） # no_root_squash # root用户具有根目录的完全管理访问权限 # anonuid=xxx # 指定NFS服务器/etc/passwd文件中匿名用户的UID # anongid=xxx # 指定NFS服务器/etc/passwd文件中匿名用户的GID # cat /etc/exports /nfs 192.</description>
    </item>
    
    <item>
      <title>S3 awscli Basic</title>
      <link>https://gnail89.github.io/posts/s3-awscli-basic/</link>
      <pubDate>Thu, 22 Feb 2024 11:59:05 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/s3-awscli-basic/</guid>
      <description>环境变量： export AWS_ACCESS_KEY_ID= export AWS_SECRET_ACCESS_KEY= export AWS_DEFAULT_REGION= S3基本操作命令： # 将bucket中特定前缀的对象全部复制到另一个bucket aws s3 cp s3://bucket-name/example s3://my-bucket/ # 将本地文件复制到s3存储中 aws s3 cp filename.txt s3://bucket-name # 将s3中的对象复制到本地目录 aws s3 cp s3://bucket-name/filename.txt ./ #以流式传输到s3的对象 echo &amp;#34;hello world&amp;#34; | aws s3 cp - s3://bucket-name/filename.txt # 以流式传输stdout打印在控制台中 $ aws s3 cp s3://bucket-name/filename.txt - hello world # 以流式传输压缩对象 aws s3 cp s3://bucket-name/pre - | bzip2 --best | aws s3 cp - s3://bucket-name/key.bz2 # bucket列表 aws s3 ls # bucket中的对象列表 aws s3 ls s3://bucket-name # bucket中特定前缀的对象列表 aws s3 ls s3://bucket-name/example/ # 创建bucket aws s3 mb s3://bucket-name # 将example中所有对象移动到另一个bucket aws s3://bucket-name/example s3://my-bucket/ # 将本地文件移动到s3 bucket中 aws s3 mv filename.</description>
    </item>
    
    <item>
      <title>Setup Openstackclient 3.12.2 by pip</title>
      <link>https://gnail89.github.io/posts/setup-openstackclient-3.12.2-by-pip/</link>
      <pubDate>Mon, 19 Feb 2024 12:57:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/setup-openstackclient-3.12.2-by-pip/</guid>
      <description>OpenStack client 3.12.2离线安装 下载python源码包：https://www.python.org/ftp/python/3.8.18/Python-3.8.18.tgz
查找pip包：https://pypi.org/
OpenStack各版本release版号：https://releases.openstack.org/
OpenStack各组件release版号：https://docs.openstack.org/releasenotes/
编译安装python tar zxf Python-3.8.18.tgz ./configure --prefix=/opt/python make &amp;amp;&amp;amp; make install 通过pip下载离线安装包 创建虚拟环境 python3.8 -m venv /opt/env_cli3.12 source /opt/env_cli3.12/bin/activate #（退出虚拟环境使用deactivate） 下载安装包 /opt/python/bin/pip3 download \ -d /opt/python-openstackclient-3.12.2 \ --index https://mirrors.bfsu.edu.cn/pypi/web/simple/ \ python-openstackclient==3.12.2 \ python-novaclient==9.1.3 \ python-keystoneclient==3.12.0 \ python-glanceclient==2.8.1 \ python-cinderclient==3.1.1 \ openstacksdk==0.9.17 \ keystoneauth1==3.1.1 \ os-client-config==1.28.1 \ osc-lib==1.7.1 \ oslo.config==4.13.2 \ oslo.i18n==3.23.1 \ oslo.serialization==2.20.3 \ oslo.utils==3.28.4 通过pip执行离线安装 cd /opt/python-openstackclient-3.12.2 /opt/python/bin/pip3 install --no-index -f . * </description>
    </item>
    
    <item>
      <title>ironic image and userdata</title>
      <link>https://gnail89.github.io/posts/ironic_image_userdata/</link>
      <pubDate>Mon, 18 Dec 2023 00:00:00 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/ironic_image_userdata/</guid>
      <description>裸金属镜像配置 镜像制作 type: whole disk image
准备 系统镜像ISO
UEFI 引导
qemu-kvm环境
命名规范 区域-版本-架构-启动类型-文件系统-镜像大小: C01-AnolisOS-8.8-x86_64-UEFI-XFS-LVM-8G-IRONIC-yyymmdd.qcow2
分区规划参考 镜像大小8GB, 可按需求进行分区, 后面配合userdata使用
FS VG LV SIZE /boot - - 1 GB /boot/efi - - 600 MB / rootvg root 1 GB /usr rootvg usr 4 GB /var rootvg var 1 GB /home rootvg home 1 GB 软件安装 cloud-init
qemu-guest-agent (可选)
dnf install -y cloud-init qemu-guest-agent cloud-init配置文件更新 # 更新的内容 no_ssh_fingerprints: true disable_root: false ssh_pwauth: true network: config: disabled datasource_list: [OpenStack, ConfigDrive] datasource: OpenStack: metadata_urls: [&amp;#39;http://169.</description>
    </item>
    
    <item>
      <title>Kubernetes V1.27.6 Centos8stream Binary Install</title>
      <link>https://gnail89.github.io/posts/kubernetes-v1.27.6-centos8stream-binary-install/</link>
      <pubDate>Wed, 27 Sep 2023 17:05:29 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/kubernetes-v1.27.6-centos8stream-binary-install/</guid>
      <description>k8s study</description>
    </item>
    
    <item>
      <title>OpenSSH 9.3p1编译安装,链接OpenSSL 1.1.1t静态库</title>
      <link>https://gnail89.github.io/posts/openssh_upgrade/</link>
      <pubDate>Tue, 28 Mar 2023 11:19:24 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/openssh_upgrade/</guid>
      <description>1. 软件版本： OS: Anolis OS release 8.8 SSH: openssh-9.3p1.tar.gz SSL: openssl-1.1.1t.tar.gz 2. 安装基础依赖包 dnf install -y gcc gcc-c++ make zlib zlib-devel pam pam-devel tar 3. 手动编译OpenSSL # 解压缩 tar zxf openssl-1.1.1t.tar.gz cd openssl-1.1.1t # 编译安装 ./config --prefix=/opt/openssl/ make &amp;amp;&amp;amp; make install 安装目录结构 /opt/openssl/ ├── bin │ ├── c_rehash │ └── openssl ├── include │ └── openssl ├── lib │ ├── engines-1.1 │ ├── libcrypto.a │ ├── libcrypto.so -&amp;gt; libcrypto.so.1.1 │ ├── libcrypto.</description>
    </item>
    
    <item>
      <title>硬盘驱动器与物理硬盘对应关系</title>
      <link>https://gnail89.github.io/posts/find-disk-slot/</link>
      <pubDate>Tue, 06 Dec 2022 19:41:40 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/find-disk-slot/</guid>
      <description>如何确定硬盘驱动器与smartctl、MegaRAID之间的对应关系</description>
    </item>
    
    <item>
      <title>SSH Security</title>
      <link>https://gnail89.github.io/posts/ssh-security/</link>
      <pubDate>Tue, 22 Nov 2022 23:34:25 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/ssh-security/</guid>
      <description>分享ssh安全配置实践
1. openssh基本配置 关注安全漏洞信息，定期升级ssh1版本，关键参数配置参考：
cat /etc/ssh/sshd_config Port 22 # 建议更改默认端口 Protocol 2 PermitRootLogin no MaxAuthTries 3 PubkeyAuthentication yes PermitEmptyPasswords no PasswordAuthentication no UsePAM yes X11Forwarding no PrintMotd no ClientAliveInterval 180 ClientAliveCountMax 0 UseDNS no Banner /etc/ssh_banner AllowUsers username 2. 使用PAM模块锁定账户 PAM2模块，pam_tally2和pam_faillock模块功能相似，以pam_faillock模块为例：
cat /etc/pam.d/password-auth #%PAM-1.0 # This file is auto-generated. # User changes will be destroyed the next time authselect is run. auth required pam_env.so auth required pam_faillock.so deny=3 unlock_time=900 even_deny_root root_unlock_time=900 auth sufficient pam_unix.</description>
    </item>
    
    <item>
      <title>Install Ceph Octopus With Cephadm</title>
      <link>https://gnail89.github.io/posts/install-ceph-octopus-with-cephadm/</link>
      <pubDate>Tue, 22 Nov 2022 17:24:19 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/install-ceph-octopus-with-cephadm/</guid>
      <description>1. 环境信息 CentOS 7 禁用firewalld 禁用selinux 时钟同步 设置主机名 ip addr hostname 192.168.61.129 ceph-node01 192.168.61.130 ceph-node02 192.168.61.131 ceph-node03 2. 安装依赖包 所有节点都需要安装
安装epel和elrepo软件源 yum install -y epel-release elrepo-release 安装python3 yum install -y python3 升级kernel至最新 yum --enablerepo=elrepo-kernel install -y kernel-ml # 设置默认使用的内核 grubby --default-index grubby --info=ALL grubby --set-default-index=0 安装docker-ce软件源 cd /etc/yum.repos.d/ curl --remote-name https://download.docker.com/linux/centos/docker-ce.repo 安装最新版本docker yum install -y docker-ce systemctl start docker systemctl enable docker 重启生效 3. 安装cephadm curl --remote-name --location https://mirrors.tuna.tsinghua.edu.cn/ceph/rpm-octopus/elnoarch/cephadm chmod +x .</description>
    </item>
    
    <item>
      <title>Markdown基本语法</title>
      <link>https://gnail89.github.io/posts/markdown/</link>
      <pubDate>Sun, 20 Nov 2022 15:37:06 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/markdown/</guid>
      <description>1. 基本语法 Markdown语法主要分类: 标题, 段落, 区块引用, 代码区块, 强调, 列表, 分割线, 链接, 图片, 反斜杠\, 符号&amp;rsquo;`&#39; 标题 使用=和-符号标记一级和二级标题 这是一级标题 ========== 这是二级标题 ---------- 使用#符号，可以表示1-6级标题 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 段落 段落内强制换行使用两个以上空格加上回车, 引用中换行可省略回车 区块引用 在段落的每行或只在第一行使用符号&amp;gt;,还可使用多个嵌套引用 &amp;gt; 区块引用 &amp;gt;&amp;gt; 嵌套引用 代码区块 代码区块的建立是在每行加上4个空格或者一个制表符 注意:需要和普通段落之间存在空行。
void main() { printf(&amp;quot;Hello, Markdown.&amp;quot;); } 强调 在强调内容两侧分别加上*或者_ *斜体* _斜体_ **粗体** __粗体__ ***斜体加粗*** ~~删除线~~ 列表 使用星号*,加号+,减号-标记无序列表 * 无序列表文字 * 无序列表文字 * 无序列表文字 + 无序列表文字 + 无序列表文字 + 无序列表文字 - 无序列表文字 - 无序列表文字 - 无序列表文字 有序列表的标记方式是将上述的符号换成数字,并加上英文句号.</description>
    </item>
    
    <item>
      <title>网站收藏夹</title>
      <link>https://gnail89.github.io/posts/website-favorites/</link>
      <pubDate>Sun, 20 Nov 2022 03:25:12 +0800</pubDate>
      
      <guid>https://gnail89.github.io/posts/website-favorites/</guid>
      <description>教程 Markdown 教程 Pro Git 2 简体中文
git在线学习工具
菜鸟教程
Linux命令大全
鸟哥教程
工具 开源中国在线工具
菜鸟教程在线工具
程序员在线工具
脚本之家在线工具
w3cschool在线工具
在线压缩转换工具
码云开源项目推荐列表
博客 Java全栈知识体系 </description>
    </item>
    
    
    
  </channel>
</rss>
