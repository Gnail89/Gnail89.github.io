[{"content":"1. 概述 无意间发现了Hugo，尝试后发现效果不错，同时把过程记录下来，主要有以下几部分组成：\nHugo v0.106 hugo-PaperMod v6.0 Github Pages Github Actions 2. 实现过程 Hugo Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。Hugo获取源文件和模板，并将它们作为输入来创建一个完整的html网站。\n二进制安装Hugo 到 Hugo Releases 下载对应的操作系统版本的Hugo二进制文件。\n生成站点 使用Hugo快速生成站点，初始文件都生成在目录里/path/to/site，配置文件格式为yaml。\nhugo new site /path/to/site --format yaml 自动生成文件夹内容如下：\n. ├── archetypes │ └── default.md ├── config.yaml ├── content ├── data ├── layouts ├── static └── themes 切换到站点目录\ncd /path/to/site 创建第一篇文章 posts文件夹会自动创建\nhugo new posts/about.md 自动生成文件到路径下content/posts/about.md，文件初始内容为：\n--- date: 2022-11-19T23:51:58+08:00 draft: false title: \u0026#34;about\u0026#34; --- # 在文末输入正文内容，以markdown格式 安装主题 到官网Hugo Themes选择心仪的主题。比如PaperMod，找到PaperMod Releases下载源码包。解压到themes目录下。\ncd themes wget https://github.com/adityatelange/hugo-PaperMod/archive/v6.0.zip unzip v6.0.zip # 将主题文件夹重命名为PaperMod ls PaperMod 启用主题 修改配置文件config.yaml\nbaseURL: \u0026#34;https://gnail89.github.io\u0026#34; # 站点URL languageCode: \u0026#34;en-us\u0026#34; # 语言 title: \u0026#34;📕W.\u0026#39;s Blog\u0026#34; # 站点名称 theme: \u0026#34;PaperMod\u0026#34; # 主题名，与themes目录下对应 paginate: 5 # 每页显示文章数量 运行Hugo 在站点根目录下执行Hugo命令进行调试。\nhugo server -D 在浏览器里打开预览：http://localhost:1313\n部署 生成静态页面，然后就可以部署到GitHub Pages，在站点根目录下执行。\n# (可选)清空public目录下的旧文件，全部重新生成。 hugo -F --cleanDestinationDir hugo 执行完成后，会在public目录下生成静态站点文件，全部复制到服务器即可。\nPaperMod主题设置 配置文件config.yaml示例参考PaperMod配置示例。\nHugo 主题配置参数大同小异，按喜好配置即可。\nbaseURL: \u0026#34;https://gnail89.github.io\u0026#34; languageCode: \u0026#34;en-us\u0026#34; title: \u0026#34;📕W.\u0026#39;s Blog\u0026#34; theme: \u0026#34;PaperMod\u0026#34; paginate: 5 enableInlineShortcodes: true enableRobotsTXT: true buildDrafts: false buildFuture: false buildExpired: false enableEmoji: true minify: disableXML: true # minifyOutput: true languages: en: languageName: \u0026#34;English\u0026#34; weight: 1 menu: main: - name: \u0026#34;Search\u0026#34; url: search/ weight: 10 - name: \u0026#34;Archive\u0026#34; url: archives/ weight: 20 - name: \u0026#34;Tags\u0026#34; url: tags/ weight: 30 - name: \u0026#34;Categories\u0026#34; url: categories/ weight: 40 outputs: home: - HTML - RSS - JSON params: env: production DateFormat: \u0026#34;2006-01-02\u0026#34; defaultTheme: auto disableThemeToggle: false ShowReadingTime: true ShowShareButtons: true ShowPostNavLinks: true ShowBreadCrumbs: true ShowCodeCopyButtons: true ShowWordCount: true ShowRssButtonInSectionTermList: true UseHugoToc: true disableSpecial1stPost: false disableScrollToTop: false comments: false hidemeta: false hideSummary: false showtoc: true tocopen: true # profile-mode profileMode: enabled: false title: \u0026#34;W.\u0026#39;s Blog\u0026#34; subtitle: \u0026#34;messages\u0026#34; imageUrl: \u0026#34;logo.jpg\u0026#34; # imageWidth: 120 # imageHeight: 120 imageTitle: \u0026#34;image\u0026#34; buttons: - name: \u0026#34;Search\u0026#34; url: search - name: \u0026#34;Posts\u0026#34; url: posts - name: \u0026#34;Archive\u0026#34; url: archives # home-info mode homeInfoParams: Title: \u0026#34;W.\u0026#39;s Blog\u0026#34; Content: \u0026#34;messages\u0026#34; socialIcons: - name: github url: \u0026#34;https://github.com/\u0026#34; - name: email url: \u0026#34;mailto:user@localhost\u0026#34; - name: rss url: \u0026#34;index.xml\u0026#34; # cover: # hidden: true # hide everywhere but not in structured data # hiddenInList: true # hide on list pages and home # hiddenInSingle: true # hide on single page # for search # https://fusejs.io/api/options.html fuseOpts: isCaseSensitive: false shouldSort: true location: 0 distance: 1000 threshold: 0.4 minMatchCharLength: 0 keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] menu: main: - identifier: Search name: \u0026#34;Search\u0026#34; url: search/ weight: 10 - identifier: Archive name: \u0026#34;Archive\u0026#34; url: archives/ weight: 20 - identifier: Tags name: \u0026#34;Tags\u0026#34; url: tags/ weight: 30 - identifier: Categories name: \u0026#34;Categories\u0026#34; url: categories/ weight: 40 # Read: https://github.com/adityatelange/hugo-PaperMod/wiki/FAQs#using-hugos-syntax-highlighter-chroma pygmentsUseClasses: true markup: # goldmark: # renderer: # unsafe: true highlight: noClasses: false # anchorLineNos: true # codeFences: true # guessSyntax: true # lineNos: true # style: monokai Github Pages 必要的条件：\ngithub账户 创建Github Pages仓库 新建一个public仓库，并命名为username.github.io，其中username指github账户名。\nGitHub Pages 项目需要符合 username.github.io 的特殊命名格式，如果仓库名和账户名没有完全匹配的话，网站就不能运行，所以一定要保证完全匹配。 Github Actions 使用Github Actions是为了实现CI/CD，自动发布文章到网站，如果喜欢手动发布静态页面的也是可以的。\n必要的条件 准备一个存放Hogo源码的私有仓库 创建好的Github Pages仓库 主要流程是配置私有仓库的Github Actions和token\n配置私有仓库的Github Actions 在Hugo博客根目录下，创建Github Actions配置文件及目录，配置文件命名为gh-pages.yml，完整路径为.github/workflows/gh-pages.yml，这就是Github Action需要的一个工作流的配置，如果需要多个工作流可以创建多个yml文件。Hugo官方文档Build Hugo With GitHub Action有提供配置文件示例：\nname: github pages on: push: branches: - main # Set a branch that will trigger a deployment pull_request: jobs: deploy: runs-on: ubuntu-22.04 steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public 整个工作流包括主要4个步骤：\n拉取代码 准备Hugo环境 编译生成静态文件 将静态文件发布出去 对于个人站点而言，示例配置文件已经足够满足需求，其中需要将token类型改为personal_token。\n示例：\nname: github pages on: push: branches: - main # Set a branch that will trigger a deployment pull_request: jobs: deploy: runs-on: ubuntu-22.04 steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: personal_token: ${{ secrets.PERSONAL_TOKEN }} # token name external_repository: username/username.github.io # 发布到Github Pages仓库 publish_branch: main # 指定分支 publish_dir: ./public # 将public目录发布出去 配置token 生成一个Personal access tokens\n登录GitHub，进入Settings-\u0026gt;Developer settings-\u0026gt;Personal access tokens页面。 点击Generate new token，在Note中输入名称，在Select scopes选择workflow 将生成的token保存下来，离开页面将无法查看。 进入需要配置工作流的仓库，进入Settings-\u0026gt;Secrets-\u0026gt;Actions页面，点击New repository secret按钮。 在页面中name部分输入在yml中设置的值PERSONAL_TOKEN，在Secret中输入token值，然后点击Add secret按钮。 3. 最终效果 在本地Hugo站点源码目录里新增/更新页面，文件格式为markdown，本地调试和预览：hugo server -D。 通过git push将源码推送到GitHub仓库。 触发GitHub Actions，按照workflow流程自动生成静态文件，然后推送的GitHub Pages仓库。 GitHub Pages仓库更新后，触发官方页面部署CI，最终实现自动发布。 ","permalink":"https://gnail89.github.io/posts/start-hugo/","summary":"1. 概述 无意间发现了Hugo，尝试后发现效果不错，同时把过程记录下来，主要有以下几部分组成：\nHugo v0.106 hugo-PaperMod v6.0 Github Pages Github Actions 2. 实现过程 Hugo Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。Hugo获取源文件和模板，并将它们作为输入来创建一个完整的html网站。\n二进制安装Hugo 到 Hugo Releases 下载对应的操作系统版本的Hugo二进制文件。\n生成站点 使用Hugo快速生成站点，初始文件都生成在目录里/path/to/site，配置文件格式为yaml。\nhugo new site /path/to/site --format yaml 自动生成文件夹内容如下：\n. ├── archetypes │ └── default.md ├── config.yaml ├── content ├── data ├── layouts ├── static └── themes 切换到站点目录\ncd /path/to/site 创建第一篇文章 posts文件夹会自动创建\nhugo new posts/about.md 自动生成文件到路径下content/posts/about.md，文件初始内容为：\n--- date: 2022-11-19T23:51:58+08:00 draft: false title: \u0026#34;about\u0026#34; --- # 在文末输入正文内容，以markdown格式 安装主题 到官网Hugo Themes选择心仪的主题。比如PaperMod，找到PaperMod Releases下载源码包。解压到themes目录下。","title":"Start"},{"content":" 分享ssh安全配置实践\n1. openssh基本配置 关注安全漏洞信息，定期升级ssh1版本，关键参数配置参考：\ncat /etc/ssh/sshd_config Port 22 # 建议更改默认端口 Protocol 2 PermitRootLogin no MaxAuthTries 3 PubkeyAuthentication yes PermitEmptyPasswords no PasswordAuthentication no UsePAM yes X11Forwarding no PrintMotd no ClientAliveInterval 180 ClientAliveCountMax 0 UseDNS no Banner /etc/ssh_banner AllowUsers username 2. 使用PAM模块锁定账户 PAM2模块，pam_tally2和pam_faillock模块功能相似，以pam_faillock模块为例：\ncat /etc/pam.d/password-auth #%PAM-1.0 # This file is auto-generated. # User changes will be destroyed the next time authselect is run. auth required pam_env.so auth required pam_faillock.so deny=3 unlock_time=900 even_deny_root root_unlock_time=900 auth sufficient pam_unix.so try_first_pass nullok auth required pam_deny.so account required pam_unix.so ... cat /etc/pam.d/system-auth #%PAM-1.0 # This file is auto-generated. # User changes will be destroyed the next time authselect is run. auth required pam_env.so auth required pam_faillock.so deny=3 unlock_time=900 even_deny_root root_unlock_time=900 auth sufficient pam_unix.so try_first_pass nullok auth required pam_deny.so account required pam_unix.so ... 3. 利用iptables + ipset 启用iptables3，并配置ssh端口阻止策略，示例：\niptables策略 systemctl enable iptables \u0026amp;\u0026amp; systemctl start iptables cat /etc/sysconfig/iptables # sample configuration for iptables service # you can edit this manually or use system-config-firewall # please do not ask us to add additional ports/services to this default configuration *filter :INPUT ACCEPT [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [0:0] -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT -A INPUT -p icmp -j ACCEPT -A INPUT -i lo -j ACCEPT -A INPUT -m set --match-set banlist src -p tcp -m tcp --dport 22 -j DROP -m comment --comment \u0026#34;block ipset banlist\u0026#34; -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT -A INPUT -j REJECT --reject-with icmp-host-prohibited -A FORWARD -j REJECT --reject-with icmp-host-prohibited COMMIT ipset策略 启用ipset4服务，并新建策略banlist。\n# 安装ipset服务 yum install -y ipset-service systemctl enable ipset # 创建ipset策略 ipset create banlist hash:ip hashsize 4096 maxelem 1000000 timeout 86400 # 保存ipset配置 ipset save \u0026gt; /etc/sysconfig/ipset # 启动ipset服务 systemctl restart ipset #查看ipset策略 ipset list 制定ipset控制脚本 以CentOS 7为例，shell脚本示例如下：\n#!/bin/bash ipset_name=\u0026#34;banlist\u0026#34; num=3 date_time=\u0026#34;$(date -d \u0026#34;1 hours ago\u0026#34; \u0026#34;+%Y-%m-%d %H:%M:%S\u0026#34;)\u0026#34; [[ $(ipset list ${ipset_name}) ]] || ipset create ${ipset_name} hash:ip hashsize 4096 maxelem 1000000 timeout 86400 ipset_info=\u0026#34;$(ipset save ${ipset_name})\u0026#34; lastb -a -s \u0026#34;${date_time}\u0026#34; |awk \u0026#39;/ssh/{print $NF}\u0026#39; |sort -n |uniq -c |while read line; do count=\u0026#34;$(echo $line |awk \u0026#39;{print $1}\u0026#39;)\u0026#34; ipaddr=\u0026#34;$(echo $line |awk \u0026#39;{print $2}\u0026#39;)\u0026#34; if [ $count -ge $num ] \u0026amp;\u0026amp; [ $(echo ${ipset_info} |grep -wc \u0026#34;${ipaddr}\u0026#34;) -eq 0 ]; then /usr/sbin/ipset add ${ipset_name} ${ipaddr} fi done 配置root用户crontab定时任务： crontab -l * * * * * /bin/bash /opt/ban_ssh_ip.sh \u0026amp;\u0026gt;/dev/null openssh\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nLinux PAM\u0026#160;\u0026#x21a9;\u0026#xfe0e;\niptables\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nipset\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://gnail89.github.io/posts/ssh-security/","summary":"分享ssh安全配置实践\n1. openssh基本配置 关注安全漏洞信息，定期升级ssh1版本，关键参数配置参考：\ncat /etc/ssh/sshd_config Port 22 # 建议更改默认端口 Protocol 2 PermitRootLogin no MaxAuthTries 3 PubkeyAuthentication yes PermitEmptyPasswords no PasswordAuthentication no UsePAM yes X11Forwarding no PrintMotd no ClientAliveInterval 180 ClientAliveCountMax 0 UseDNS no Banner /etc/ssh_banner AllowUsers username 2. 使用PAM模块锁定账户 PAM2模块，pam_tally2和pam_faillock模块功能相似，以pam_faillock模块为例：\ncat /etc/pam.d/password-auth #%PAM-1.0 # This file is auto-generated. # User changes will be destroyed the next time authselect is run. auth required pam_env.so auth required pam_faillock.so deny=3 unlock_time=900 even_deny_root root_unlock_time=900 auth sufficient pam_unix.","title":"SSH Security"},{"content":"学习中1 参考资料：https://blog.51cto.com/renlixing/3134294\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://gnail89.github.io/posts/install-ceph-octopus-with-cephadm/","summary":"学习中1 参考资料：https://blog.51cto.com/renlixing/3134294\u0026#160;\u0026#x21a9;\u0026#xfe0e;","title":"Install Ceph Octopus With Cephadm"},{"content":"1. 基本语法 Markdown语法主要分类: 标题, 段落, 区块引用, 代码区块, 强调, 列表, 分割线, 链接, 图片, 反斜杠\\, 符号\u0026rsquo;`' 标题 使用=和-符号标记一级和二级标题 这是一级标题 ========== 这是二级标题 ---------- 使用#符号，可以表示1-6级标题 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 段落 段落内强制换行使用两个以上空格加上回车, 引用中换行可省略回车 区块引用 在段落的每行或只在第一行使用符号\u0026gt;,还可使用多个嵌套引用 \u0026gt; 区块引用 \u0026gt;\u0026gt; 嵌套引用 代码区块 代码区块的建立是在每行加上4个空格或者一个制表符 注意:需要和普通段落之间存在空行。\nvoid main() { printf(\u0026quot;Hello, Markdown.\u0026quot;); } 强调 在强调内容两侧分别加上*或者_ *斜体* _斜体_ **粗体** __粗体__ ***斜体加粗*** ~~删除线~~ 列表 使用星号*,加号+,减号-标记无序列表 * 无序列表文字 * 无序列表文字 * 无序列表文字 + 无序列表文字 + 无序列表文字 + 无序列表文字 - 无序列表文字 - 无序列表文字 - 无序列表文字 有序列表的标记方式是将上述的符号换成数字,并加上英文句号.,后面还有一个空格 1. 有序列表 2. 有序列表 3. 有序列表 分割线 分割线最常使用就是三个或以上*或-或_ 链接 链接可以由两种形式生成：行内式和参考式\n行内式:\n[显示名称](https://www.google.com \u0026#34;链接别名\u0026#34;) 效果:\n显示名称\n参考式: [显示名称1][1] [显示名称2][2] [1]:https://www.google.com \u0026#34;链接别名1\u0026#34; [2]:https://www.google.com \u0026#34;链接别名2\u0026#34; 效果: 显示名称1 显示名称2\n图片 添加图片的形式和链接相似，只需在链接的基础上前方加一个英文感叹号! ![显示名称](https://www.google.com/logo.png \u0026#34;链接别名\u0026#34;) 反斜杠\\ 相当于反转义作用。使符号成为普通符号 以下列出的字符都可以通过使用反斜杠字符从而达到转义目的。 Character Name \\ backslash ` backtick (see also escaping backticks in code) * asterisk _ underscore { } curly braces [ ] brackets ( ) parentheses # pound sign + plus sign - minus sign (hyphen) . dot ! exclamation mark | pipe (see also escaping pipe in tables) 符号\u0026rsquo;`' 起到标记的作用, 例如: `point` 效果:\npoint\n2. 扩展语法 表格 要添加表，请使用三个或多个连字符（---）创建每列的标题，并使用管道（|）分隔每列。您可以选择在表的任一端添加管道。\n| Syntax | Description | | ----------- | ----------- | | Header | Title | | Paragraph | Text | 效果： Syntax Description Header Title Paragraph Text 对齐 通过在标题行中的连字符的左侧，右侧或两侧添加冒号（:），将列中的文本对齐到左侧，右侧或中心。\n| Syntax | Description | Test Text | | :--- | :----: | ---: | | Header | Title | Here\u0026#39;s this | | Paragraph | Text | And more | 效果： Syntax Description Test Text Header Title Here\u0026rsquo;s this Paragraph Text And more 围栏代码块 Markdown基本语法允许您通过将行缩进四个空格或一个制表符来创建代码块。如果发现不方便，请尝试使用受保护的代码块。根据Markdown处理器或编辑器的不同，您将在代码块之前和之后的行上使用三个反引号(```）或三个波浪号（~~~）。\n``` { \u0026quot;firstName\u0026quot;: \u0026quot;John\u0026quot;, \u0026quot;lastName\u0026quot;: \u0026quot;Smith\u0026quot;, \u0026quot;age\u0026quot;: 25 } ``` 效果： { \u0026#34;firstName\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;age\u0026#34;: 25 } 语法高亮 许多Markdown处理器都支持受围栏代码块的语法突出显示。使用此功能，您可以为编写代码的任何语言添加颜色突出显示。要添加语法突出显示，请在受防护的代码块之前的反引号旁边指定一种语言。\n```json { \u0026quot;firstName\u0026quot;: \u0026quot;John\u0026quot;, \u0026quot;lastName\u0026quot;: \u0026quot;Smith\u0026quot;, \u0026quot;age\u0026quot;: 25 } ``` 效果： { \u0026#34;firstName\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;age\u0026#34;: 25 } 定义列表 一些Markdown处理器允许您创建术语及其对应定义的定义列表。要创建定义列表，请在第一行上键入术语。在下一行，键入一个冒号，后跟一个空格和定义。\nFirst Term : This is the definition of the first term. Second Term : This is one definition of the second term. : This is another definition of the second term. 效果： First Term This is the definition of the first term. Second Term This is one definition of the second term. This is another definition of the second term. 任务列表语法 任务列表使您可以创建带有复选框的项目列表。在支持任务列表的Markdown应用程序中，复选框将显示在内容旁边。要创建任务列表，请在任务列表项之前添加破折号-和方括号[ ]，并在[ ]前面加上空格。要选择一个复选框，请在方括号[x]之间添加 x 。\n- [x] Write the press release - [ ] Update the website - [ ] Contact the media 效果： Write the press release Update the website Contact the media 使用 Emoji 表情 有两种方法可以将表情符号添加到Markdown文件中：将表情符号复制并粘贴到Markdown格式的文本中，或者键入emoji shortcodes。\n复制和粘贴表情符号 在大多数情况下，您可以简单地从Emojipedia等来源复制表情符号并将其粘贴到文档中。许多Markdown应用程序会自动以Markdown格式的文本显示表情符号。从Markdown应用程序导出的HTML和PDF文件应显示表情符号。\nTip: 如果您使用的是静态网站生成器，请确保将HTML页面编码为UTF-8。\n使用表情符号简码 一些Markdown应用程序允许您通过键入表情符号短代码来插入表情符号。这些以冒号开头和结尾，并包含表情符号的名称。\n图钉 📌 效果： 图钉 📌\n自动网址链接 许多Markdown处理器会自动将URL转换为链接。这意味着如果您输入http://www.example.com，即使您未使用方括号，您的Markdown处理器也会自动将其转换为链接。\nhttp://www.example.com 效果： http://www.example.com\n禁用自动URL链接 如果您不希望自动链接URL，则可以通过将URL表示为带反引号(`)的代码来删除该链接。\n`http://www.example.com` 效果： http://www.example.com\n脚注 Here\u0026#39;s a simple footnote,[^1] and here\u0026#39;s a longer one.[^bignote] [^1]: This is the first footnote. [^bignote]: Here\u0026#39;s one with multiple paragraphs and code. Indent paragraphs to include them in the footnote. `{ my code }` Add as many paragraphs as you like. 效果： Here\u0026rsquo;s a simple footnote,1 and here\u0026rsquo;s a longer one.2\n参考资料3\nThis is the first footnote.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nHere\u0026rsquo;s one with multiple paragraphs and code.\nIndent paragraphs to include them in the footnote.\n{ my code }\nAdd as many paragraphs as you like.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://markdown.com.cn\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://gnail89.github.io/posts/markdown/","summary":"1. 基本语法 Markdown语法主要分类: 标题, 段落, 区块引用, 代码区块, 强调, 列表, 分割线, 链接, 图片, 反斜杠\\, 符号\u0026rsquo;`' 标题 使用=和-符号标记一级和二级标题 这是一级标题 ========== 这是二级标题 ---------- 使用#符号，可以表示1-6级标题 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 段落 段落内强制换行使用两个以上空格加上回车, 引用中换行可省略回车 区块引用 在段落的每行或只在第一行使用符号\u0026gt;,还可使用多个嵌套引用 \u0026gt; 区块引用 \u0026gt;\u0026gt; 嵌套引用 代码区块 代码区块的建立是在每行加上4个空格或者一个制表符 注意:需要和普通段落之间存在空行。\nvoid main() { printf(\u0026quot;Hello, Markdown.\u0026quot;); } 强调 在强调内容两侧分别加上*或者_ *斜体* _斜体_ **粗体** __粗体__ ***斜体加粗*** ~~删除线~~ 列表 使用星号*,加号+,减号-标记无序列表 * 无序列表文字 * 无序列表文字 * 无序列表文字 + 无序列表文字 + 无序列表文字 + 无序列表文字 - 无序列表文字 - 无序列表文字 - 无序列表文字 有序列表的标记方式是将上述的符号换成数字,并加上英文句号.","title":"Markdown基本语法"},{"content":" Markdown 官方教程 菜鸟教程\nLinux命令大全\n鸟哥教程\n","permalink":"https://gnail89.github.io/posts/website-favorites/","summary":"Markdown 官方教程 菜鸟教程\nLinux命令大全\n鸟哥教程","title":"网站收藏夹"}]