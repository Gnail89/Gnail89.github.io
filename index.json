[{"content":"1. 概述 无意间发现了Hugo，尝试后发现效果不错，同时把过程记录下来，主要有以下几部分组成：\nHugo v0.106 hugo-PaperMod v6.0 Github Pages Github Actions 2. 实现过程 Hugo Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。Hugo获取源文件和模板，并将它们作为输入来创建一个完整的html网站。\n二进制安装Hugo 到 Hugo Releases 下载对应的操作系统版本的Hugo二进制文件。\n生成站点 使用Hugo快速生成站点，初始文件都生成在目录里/path/to/site，配置文件格式为yaml。\nhugo new site /path/to/site --format yaml 自动生成文件夹内容如下：\n. ├── archetypes │ └── default.md ├── config.yaml ├── content ├── data ├── layouts ├── static └── themes 切换到站点目录\ncd /path/to/site 创建第一篇文章 posts文件夹会自动创建\nhugo new posts/about.md 自动生成文件到路径下content/posts/about.md，文件初始内容为：\n--- date: 2022-11-19T23:51:58+08:00 draft: false title: \u0026#34;about\u0026#34; --- # 在文末输入正文内容，以markdown格式 安装主题 到官网Hugo Themes选择心仪的主题。比如PaperMod，找到PaperMod Releases下载源码包。解压到themes目录下。\ncd themes wget https://github.com/adityatelange/hugo-PaperMod/archive/v6.0.zip unzip v6.0.zip # 将主题文件夹重命名为PaperMod ls PaperMod 启用主题 修改配置文件config.yaml\nbaseURL: \u0026#34;https://gnail89.github.io\u0026#34; # 站点URL languageCode: \u0026#34;en-us\u0026#34; # 语言 title: \u0026#34;📕W.\u0026#39;s Blog\u0026#34; # 站点名称 theme: \u0026#34;PaperMod\u0026#34; # 主题名，与themes目录下对应 paginate: 5 # 每页显示文章数量 运行Hugo 在站点根目录下执行Hugo命令进行调试。\nhugo server -D 在浏览器里打开预览：http://localhost:1313\n部署 生成静态页面，然后就可以部署到GitHub Pages，在站点根目录下执行。\n# (可选)清空public目录下的旧文件，全部重新生成。 hugo -F --cleanDestinationDir hugo 执行完成后，会在public目录下生成静态站点文件，全部复制到服务器即可。\nPaperMod主题设置 配置文件config.yaml示例参考PaperMod配置示例。\nHugo 主题配置参数大同小异，按喜好配置即可。\nbaseURL: \u0026#34;https://gnail89.github.io\u0026#34; languageCode: \u0026#34;en-us\u0026#34; title: \u0026#34;📕W.\u0026#39;s Blog\u0026#34; theme: \u0026#34;PaperMod\u0026#34; paginate: 5 enableInlineShortcodes: true enableRobotsTXT: true buildDrafts: false buildFuture: false buildExpired: false enableEmoji: true minify: disableXML: true # minifyOutput: true languages: en: languageName: \u0026#34;English\u0026#34; weight: 1 menu: main: - name: \u0026#34;Search\u0026#34; url: search/ weight: 10 - name: \u0026#34;Archive\u0026#34; url: archives/ weight: 20 - name: \u0026#34;Tags\u0026#34; url: tags/ weight: 30 - name: \u0026#34;Categories\u0026#34; url: categories/ weight: 40 outputs: home: - HTML - RSS - JSON params: env: production DateFormat: \u0026#34;2006-01-02\u0026#34; defaultTheme: auto disableThemeToggle: false ShowReadingTime: true ShowShareButtons: true ShowPostNavLinks: true ShowBreadCrumbs: true ShowCodeCopyButtons: true ShowWordCount: true ShowRssButtonInSectionTermList: true UseHugoToc: true disableSpecial1stPost: false disableScrollToTop: false comments: false hidemeta: false hideSummary: false showtoc: true tocopen: true # profile-mode profileMode: enabled: false title: \u0026#34;W.\u0026#39;s Blog\u0026#34; subtitle: \u0026#34;messages\u0026#34; imageUrl: \u0026#34;logo.jpg\u0026#34; # imageWidth: 120 # imageHeight: 120 imageTitle: \u0026#34;image\u0026#34; buttons: - name: \u0026#34;Search\u0026#34; url: search - name: \u0026#34;Posts\u0026#34; url: posts - name: \u0026#34;Archive\u0026#34; url: archives # home-info mode homeInfoParams: Title: \u0026#34;W.\u0026#39;s Blog\u0026#34; Content: \u0026#34;messages\u0026#34; socialIcons: - name: github url: \u0026#34;https://github.com/\u0026#34; - name: email url: \u0026#34;mailto:user@localhost\u0026#34; - name: rss url: \u0026#34;index.xml\u0026#34; # cover: # hidden: true # hide everywhere but not in structured data # hiddenInList: true # hide on list pages and home # hiddenInSingle: true # hide on single page # for search # https://fusejs.io/api/options.html fuseOpts: isCaseSensitive: false shouldSort: true location: 0 distance: 1000 threshold: 0.4 minMatchCharLength: 0 keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] menu: main: - identifier: Search name: \u0026#34;Search\u0026#34; url: search/ weight: 10 - identifier: Archive name: \u0026#34;Archive\u0026#34; url: archives/ weight: 20 - identifier: Tags name: \u0026#34;Tags\u0026#34; url: tags/ weight: 30 - identifier: Categories name: \u0026#34;Categories\u0026#34; url: categories/ weight: 40 # Read: https://github.com/adityatelange/hugo-PaperMod/wiki/FAQs#using-hugos-syntax-highlighter-chroma pygmentsUseClasses: true markup: # goldmark: # renderer: # unsafe: true highlight: noClasses: false # anchorLineNos: true # codeFences: true # guessSyntax: true # lineNos: true # style: monokai Github Pages 必要的条件：\ngithub账户 创建Github Pages仓库 新建一个public仓库，并命名为username.github.io，其中username指github账户名。\nGitHub Pages 项目需要符合 username.github.io 的特殊命名格式，如果仓库名和账户名没有完全匹配的话，网站就不能运行，所以一定要保证完全匹配。 Github Actions 使用Github Actions是为了实现CI/CD，自动发布文章到网站，如果喜欢手动发布静态页面的也是可以的。\n必要的条件 准备一个存放Hogo源码的私有仓库 创建好的Github Pages仓库 主要流程是配置私有仓库的Github Actions和token\n配置私有仓库的Github Actions 在Hugo博客根目录下，创建Github Actions配置文件及目录，配置文件命名为gh-pages.yml，完整路径为.github/workflows/gh-pages.yml，这就是Github Action需要的一个工作流的配置，如果需要多个工作流可以创建多个yml文件。Hugo官方文档Build Hugo With GitHub Action有提供配置文件示例：\nname: github pages on: push: branches: - main # Set a branch that will trigger a deployment pull_request: jobs: deploy: runs-on: ubuntu-22.04 steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public 整个工作流包括主要4个步骤：\n拉取代码 准备Hugo环境 编译生成静态文件 将静态文件发布出去 对于个人站点而言，示例配置文件已经足够满足需求，其中需要将token类型改为personal_token。\n示例：\nname: github pages on: push: branches: - main # Set a branch that will trigger a deployment pull_request: jobs: deploy: runs-on: ubuntu-22.04 steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: personal_token: ${{ secrets.PERSONAL_TOKEN }} # token name external_repository: username/username.github.io # 发布到Github Pages仓库 publish_branch: main # 指定分支 publish_dir: ./public # 将public目录发布出去 配置token 生成一个Personal access tokens\n登录GitHub，进入Settings-\u0026gt;Developer settings-\u0026gt;Personal access tokens页面。 点击Generate new token，在Note中输入名称，在Select scopes选择workflow 将生成的token保存下来，离开页面将无法查看。 进入需要配置工作流的仓库，进入Settings-\u0026gt;Secrets-\u0026gt;Actions页面，点击New repository secret按钮。 在页面中name部分输入在yml中设置的值PERSONAL_TOKEN，在Secret中输入token值，然后点击Add secret按钮。 3. 最终效果 在本地Hugo站点源码目录里新增/更新页面，文件格式为markdown，本地调试和预览：hugo server -D。 通过git push将源码推送到GitHub仓库。 触发GitHub Actions，按照workflow流程自动生成静态文件，然后推送的GitHub Pages仓库。 GitHub Pages仓库更新后，触发官方页面部署CI，最终实现自动发布。 ","permalink":"https://gnail89.github.io/posts/start-hugo/","summary":"1. 概述 无意间发现了Hugo，尝试后发现效果不错，同时把过程记录下来，主要有以下几部分组成：\nHugo v0.106 hugo-PaperMod v6.0 Github Pages Github Actions 2. 实现过程 Hugo Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。Hugo获取源文件和模板，并将它们作为输入来创建一个完整的html网站。\n二进制安装Hugo 到 Hugo Releases 下载对应的操作系统版本的Hugo二进制文件。\n生成站点 使用Hugo快速生成站点，初始文件都生成在目录里/path/to/site，配置文件格式为yaml。\nhugo new site /path/to/site --format yaml 自动生成文件夹内容如下：\n. ├── archetypes │ └── default.md ├── config.yaml ├── content ├── data ├── layouts ├── static └── themes 切换到站点目录\ncd /path/to/site 创建第一篇文章 posts文件夹会自动创建\nhugo new posts/about.md 自动生成文件到路径下content/posts/about.md，文件初始内容为：\n--- date: 2022-11-19T23:51:58+08:00 draft: false title: \u0026#34;about\u0026#34; --- # 在文末输入正文内容，以markdown格式 安装主题 到官网Hugo Themes选择心仪的主题。比如PaperMod，找到PaperMod Releases下载源码包。解压到themes目录下。","title":"Start"},{"content":"待完成 ","permalink":"https://gnail89.github.io/posts/cobbler_setup/","summary":"待完成 ","title":"Cobbler基础"},{"content":"待完成 ","permalink":"https://gnail89.github.io/posts/git-basics/","summary":"待完成 ","title":"git基础"},{"content":"工具 需要以下最新版本工具\nsmartctl\nMegaCli64\nlsscsi\n获取基本信息 使用lsscsi获取SCSI设备信息和属性 其中id的含义可以从/proc/scsi/scsi文件中简单获取。 [0:2:2:0]分别表示Host, Channel, Id, Lun\n# lsscsi -g [0:0:2:0] enclosu SAS/SATA Expander RevA - /dev/sg0 [0:2:0:0] disk LSI LSI 3.40 /dev/sda /dev/sg1 [0:2:1:0] disk LSI LSI 3.40 /dev/sdb /dev/sg2 [0:2:2:0] disk LSI LSI 3.40 /dev/sdc /dev/sg3 [0:2:3:0] disk LSI LSI 3.40 /dev/sdd /dev/sg4 [0:2:4:0] disk LSI LSI 3.40 /dev/sde /dev/sg5 [0:2:5:0] disk LSI LSI 3.40 /dev/sdf /dev/sg6 [0:2:6:0] disk LSI LSI 3.40 /dev/sdg /dev/sg7 [0:2:7:0] disk LSI LSI 3.40 /dev/sdh /dev/sg8 [0:2:8:0] disk LSI LSI 3.40 /dev/sdi /dev/sg9 [0:2:9:0] disk LSI LSI 3.40 /dev/sdj /dev/sg10 [0:2:10:0] disk LSI LSI 3.40 /dev/sdk /dev/sg11 [0:2:11:0] disk LSI LSI 3.40 /dev/sdl /dev/sg12 [0:2:12:0] disk LSI LSI 3.40 /dev/sdm /dev/sg13 # cat /proc/scsi/scsi Attached devices: Host: scsi0 Channel: 00 Id: 02 Lun: 00 Vendor: SAS/SATA Model: Expander Rev: RevA Type: Enclosure ANSI SCSI revision: 05 Host: scsi0 Channel: 02 Id: 00 Lun: 00 Vendor: LSI Model: LSI Rev: 3.40 Type: Direct-Access ANSI SCSI revision: 05 Host: scsi0 Channel: 02 Id: 01 Lun: 00 Vendor: LSI Model: LSI Rev: 3.40 Type: Direct-Access ANSI SCSI revision: 05 ... 使用MegaCli64获取硬盘信息 # 获取MegaRAID的bus id为：02:00.0 # lspci |grep MegaRAID 02:00.0 RAID bus controller: LSI Logic / Symbios Logic MegaRAID SAS 2208 # MegaCli64 -LdPdInfo -aALL |egrep \u0026#34;Target Id:|Enclosure Device ID:|^Slot Number:|^Device Id:|^Inquiry Data:\u0026#34; Virtual Drive: 0 (Target Id: 0) Enclosure Device ID: 2 Slot Number: 12 Device Id: 18 Inquiry Data: HGST xxxxxxxx xxxxxxxx Enclosure Device ID: 2 Slot Number: 13 Device Id: 19 Inquiry Data: HGST xxxxxxxx xxxxxxxx Virtual Drive: 1 (Target Id: 1) Enclosure Device ID: 2 Slot Number: 0 Device Id: 6 Inquiry Data: HGST xxxxxxxx xxxxxxxx Virtual Drive: 2 (Target Id: 2) Enclosure Device ID: 2 Slot Number: 1 Device Id: 14 Inquiry Data: YHH7HWLAA xxxxxxxx xxxxxxxx ... # MegaCli64 -pdInfo -PhysDrv[2:1] -aALL Enclosure Device ID: 2 Slot Number: 1 Drive\u0026#39;s position: DiskGroup: 10, Span: 0, Arm: 0 Enclosure position: 1 Device Id: 14 WWN: 5000cca225d181c1 Sequence Number: 2 Media Error Count: 0 Other Error Count: 0 Predictive Failure Count: 0 Last Predictive Failure Event Seq Number: 0 PD Type: SATA ... 使用smartctl扫描设备 # smartctl --scan-open /dev/sda -d scsi # /dev/sda, SCSI device /dev/sdb -d scsi # /dev/sdb, SCSI device /dev/sdc -d scsi # /dev/sdc, SCSI device /dev/sdd -d scsi # /dev/sdd, SCSI device ... /dev/bus/0 -d sat+megaraid,3 # /dev/bus/0 [megaraid_disk_03] [SAT]，ATA device /dev/bus/0 -d sat+megaraid,11 # /dev/bus/0 [megaraid_disk_11] [SAT]，ATA device /dev/bus/0 -d sat+megaraid,14 # /dev/bus/0 [megaraid_disk_14] [SAT]，ATA device /dev/bus/0 -d sat+megaraid,17 # /dev/bus/0 [megaraid_disk_17] [SAT]，ATA device ... 方法 从lsscsi中可以得到设备ID 例子：[0:2:2:0] disk LSI \u0026hellip; /dev/sdc ==\u0026gt; Host id: 0 Channel id: 2 Target id: 2 # 对应MegaRAID中的Target id Lun id: 0\n从MegaCli64中可以得到设备的Target id，Enclosure Device ID，Slot Number，Inquiry Data等信息 例子：PhysDrv[2:1] Virtual Drive: 2 (Target Id: 2) # 对应scsi中的Target id Device Id: 14 # 对应smartctl中的megaraid id Enclosure Device ID: 2 Slot Number: 1 # 对应机箱槽位号 Inquiry Data: YHH7HWLAA xxxxxxxx xxxxxxxx # 硬盘序列号信息\n从smartctl中可以得到megaraid信息 /dev/bus/0 -d sat+megaraid,14 # 对应MegaRAID中Device id\n以/dev/sdc为例。\n/dev/sdc的scsi id为[0:2:2:0] =\u0026gt; MegaRAID硬盘PhysDrv[2:1] =\u0026gt; smartctl中megaraid,14\n通过序列号验证MegaRAID与smartctl的关系：\n# smartctl -a /dev/bus/0 -d sat+megaraid,14 |grep \u0026#34;Serial Number\u0026#34; Serial Number: YHH7HWLAA # MegaC1164 -pdInfo -PhysDrv[2:1] -aALL ... Enclosure Device ID: 2 Slot Number: 1 Device Id: 14 Inquiry Data: YHH7HWLAA xxxxxxxx xxxxxxxx ... ","permalink":"https://gnail89.github.io/posts/find-disk-slot/","summary":"工具 需要以下最新版本工具\nsmartctl\nMegaCli64\nlsscsi\n获取基本信息 使用lsscsi获取SCSI设备信息和属性 其中id的含义可以从/proc/scsi/scsi文件中简单获取。 [0:2:2:0]分别表示Host, Channel, Id, Lun\n# lsscsi -g [0:0:2:0] enclosu SAS/SATA Expander RevA - /dev/sg0 [0:2:0:0] disk LSI LSI 3.40 /dev/sda /dev/sg1 [0:2:1:0] disk LSI LSI 3.40 /dev/sdb /dev/sg2 [0:2:2:0] disk LSI LSI 3.40 /dev/sdc /dev/sg3 [0:2:3:0] disk LSI LSI 3.40 /dev/sdd /dev/sg4 [0:2:4:0] disk LSI LSI 3.40 /dev/sde /dev/sg5 [0:2:5:0] disk LSI LSI 3.40 /dev/sdf /dev/sg6 [0:2:6:0] disk LSI LSI 3.40 /dev/sdg /dev/sg7 [0:2:7:0] disk LSI LSI 3.","title":"硬盘驱动器与物理硬盘对应关系"},{"content":" 分享ssh安全配置实践\n1. openssh基本配置 关注安全漏洞信息，定期升级ssh1版本，关键参数配置参考：\ncat /etc/ssh/sshd_config Port 22 # 建议更改默认端口 Protocol 2 PermitRootLogin no MaxAuthTries 3 PubkeyAuthentication yes PermitEmptyPasswords no PasswordAuthentication no UsePAM yes X11Forwarding no PrintMotd no ClientAliveInterval 180 ClientAliveCountMax 0 UseDNS no Banner /etc/ssh_banner AllowUsers username 2. 使用PAM模块锁定账户 PAM2模块，pam_tally2和pam_faillock模块功能相似，以pam_faillock模块为例：\ncat /etc/pam.d/password-auth #%PAM-1.0 # This file is auto-generated. # User changes will be destroyed the next time authselect is run. auth required pam_env.so auth required pam_faillock.so deny=3 unlock_time=900 even_deny_root root_unlock_time=900 auth sufficient pam_unix.so try_first_pass nullok auth required pam_deny.so account required pam_unix.so ... cat /etc/pam.d/system-auth #%PAM-1.0 # This file is auto-generated. # User changes will be destroyed the next time authselect is run. auth required pam_env.so auth required pam_faillock.so deny=3 unlock_time=900 even_deny_root root_unlock_time=900 auth sufficient pam_unix.so try_first_pass nullok auth required pam_deny.so account required pam_unix.so ... 3. 利用iptables + ipset 启用iptables3，并配置ssh端口阻止策略，示例：\niptables策略 systemctl enable iptables \u0026amp;\u0026amp; systemctl start iptables cat /etc/sysconfig/iptables # sample configuration for iptables service # you can edit this manually or use system-config-firewall # please do not ask us to add additional ports/services to this default configuration *filter :INPUT ACCEPT [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [0:0] -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT -A INPUT -p icmp -j ACCEPT -A INPUT -i lo -j ACCEPT -A INPUT -m set --match-set banlist src -p tcp -m tcp --dport 22 -j DROP -m comment --comment \u0026#34;block ipset banlist\u0026#34; -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT -A INPUT -j REJECT --reject-with icmp-host-prohibited -A FORWARD -j REJECT --reject-with icmp-host-prohibited COMMIT ipset策略 启用ipset4服务，并新建策略banlist。\n# 安装ipset服务 yum install -y ipset-service systemctl enable ipset # 创建ipset策略 ipset create banlist hash:ip hashsize 4096 maxelem 1000000 timeout 86400 # 保存ipset配置 ipset save \u0026gt; /etc/sysconfig/ipset # 启动ipset服务 systemctl restart ipset #查看ipset策略 ipset list 制定ipset控制脚本 以CentOS 7为例，shell脚本示例如下：\n#!/bin/bash ipset_name=\u0026#34;banlist\u0026#34; num=3 date_time=\u0026#34;$(date -d \u0026#34;1 hours ago\u0026#34; \u0026#34;+%Y-%m-%d %H:%M:%S\u0026#34;)\u0026#34; [[ $(ipset list ${ipset_name}) ]] || ipset create ${ipset_name} hash:ip hashsize 4096 maxelem 1000000 timeout 86400 ipset_info=\u0026#34;$(ipset save ${ipset_name})\u0026#34; lastb -a -s \u0026#34;${date_time}\u0026#34; |awk \u0026#39;/ssh/{print $NF}\u0026#39; |sort -n |uniq -c |while read line; do count=\u0026#34;$(echo $line |awk \u0026#39;{print $1}\u0026#39;)\u0026#34; ipaddr=\u0026#34;$(echo $line |awk \u0026#39;{print $2}\u0026#39;)\u0026#34; if [ $count -ge $num ] \u0026amp;\u0026amp; [ $(echo ${ipset_info} |grep -wc \u0026#34;${ipaddr}\u0026#34;) -eq 0 ]; then /usr/sbin/ipset add ${ipset_name} ${ipaddr} fi done 配置root用户crontab定时任务： crontab -l * * * * * /bin/bash /opt/ban_ssh_ip.sh \u0026amp;\u0026gt;/dev/null openssh\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nLinux PAM\u0026#160;\u0026#x21a9;\u0026#xfe0e;\niptables\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nipset\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://gnail89.github.io/posts/ssh-security/","summary":"分享ssh安全配置实践\n1. openssh基本配置 关注安全漏洞信息，定期升级ssh1版本，关键参数配置参考：\ncat /etc/ssh/sshd_config Port 22 # 建议更改默认端口 Protocol 2 PermitRootLogin no MaxAuthTries 3 PubkeyAuthentication yes PermitEmptyPasswords no PasswordAuthentication no UsePAM yes X11Forwarding no PrintMotd no ClientAliveInterval 180 ClientAliveCountMax 0 UseDNS no Banner /etc/ssh_banner AllowUsers username 2. 使用PAM模块锁定账户 PAM2模块，pam_tally2和pam_faillock模块功能相似，以pam_faillock模块为例：\ncat /etc/pam.d/password-auth #%PAM-1.0 # This file is auto-generated. # User changes will be destroyed the next time authselect is run. auth required pam_env.so auth required pam_faillock.so deny=3 unlock_time=900 even_deny_root root_unlock_time=900 auth sufficient pam_unix.","title":"SSH Security"},{"content":"1. 环境信息 CentOS 7 禁用firewalld 禁用selinux 时钟同步 设置主机名 ip addr hostname 192.168.61.129 ceph-node01 192.168.61.130 ceph-node02 192.168.61.131 ceph-node03 2. 安装依赖包 所有节点都需要安装\n安装epel和elrepo软件源 yum install -y epel-release elrepo-release 安装python3 yum install -y python3 升级kernel至最新 yum --enablerepo=elrepo-kernel install -y kernel-ml # 设置默认使用的内核 grubby --default-index grubby --info=ALL grubby --set-default-index=0 安装docker-ce软件源 cd /etc/yum.repos.d/ curl --remote-name https://download.docker.com/linux/centos/docker-ce.repo 安装最新版本docker yum install -y docker-ce systemctl start docker systemctl enable docker 重启生效 3. 安装cephadm curl --remote-name --location https://mirrors.tuna.tsinghua.edu.cn/ceph/rpm-octopus/elnoarch/cephadm chmod +x ./cephadm ./cephadm add-repo --release octopus #添加repo软件源 ./cephadm install #升级最新cephadm包 4. 初始化ceph集群 初始化第一个mon节点 cephadm install ceph-common #安装ceph cli工具 #查看编排后端是cephadm，如果是显示rook这里后端就会显示rook。 ceph orch status mkdir -p /etc/ceph cephadm bootstrap --mon-ip 192.168.61.129 #初始化一个mon节点，获取最新的容器镜像到本地 # 获取mon容器shell cephadm shell --fsid ec45b570-5432-11ed-9ea9-000c29cb9f51 -c /etc/ceph/ceph.conf -k /etc/ceph/ceph.client.admin.keyring 引导完成一个单节点群集，程序会做如下事情：\n在本地主机上为新集群创建monitor 和 manager daemon守护程序。 为Ceph集群生成一个新的SSH密钥，并将其添加到root用户的/root/.ssh/authorized_keys文件中。 将与新群集进行通信所需的最小配置文件保存到/etc/ceph/ceph.conf。 向/etc/ceph/ceph.client.admin.keyring写入client.admin管理secret key的副本。 将public key的副本写入/etc/ceph/ceph.pub。 初始的mgr信息：\nURL: https://ceph-node01:8443 User: admin Password: 安装提示获取密码 (可选)如果忘记mgr密码可以通过以下方法重置密码(将密码写入password文件中，通过命令导入密码)\nceph dashboard ac-user-set-password admin -i password 当前节点安装后容器列表中的角色： mon.ceph-node01 # monitor节点 mgr.ceph-node01.hnlomt # mgr管理节点 prometheus.ceph-node01 # prometheus监控 alertmanager.ceph-node01 # prometheus告警相关 grafana.ceph-node01 # 监控告警展示 node-exporter.ceph-node01 # 数据采集node节点 crash.ceph-node01 # crash相关 分发cephadm节点公钥到其余节点： ssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-node02 ssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-node03 新增ceph主机到集群新增ceph主机到集群 ceph orch host add ceph-node02 192.168.61.130 ceph orch host add ceph-node03 192.168.61.131 调整mon节点分布 默认mon节点是5个，随机分布在集群主机上，可以根据实际情况，指定部署ceph mon节点（orch模块自动管理）\nceph orch apply mon \u0026#34;ceph-node01,ceph-node02,ceph-node03\u0026#34; 指定部署mon数量，orch模块自动部署，默认值为5 ceph orch apply mon 3 指定部署mon到指定标签节点（orch模块自动管理） ceph orch apply mon label:mon 禁用mon自动部署（可选） 这种情况下需要手动部署mon节点，mon节点不受orch模块自动管理\nceph orch apply mon --unmanaged 手动指定节点部署mon（可选） ceph orch daemon add mon ceph-node02:192.168.61.130 ceph orch daemon add mon ceph-node03:192.168.61.131 对节点打标签(可选) ceph orch host label add ceph-node01 mon ceph orch host label add ceph-node02 mon ceph orch host label add ceph-node03 mon ceph orch host label add ceph-node01 _admin ceph orch host label add ceph-node01 mgr ceph orch host label add ceph-node02 mgr 查询集群状态 查看Service状态 ceph orch ls NAME RUNNING REFRESHED AGE PLACEMENT IMAGNAME IMAGE ID alertmanager 1/1 7m ago 23h count:1 quay.iprometheus/alertmanager:v0.20.0 0881eb8f169f crash 3/3 7m ago 23h * quay.io/cepceph:v15 93146564743f grafana 1/1 7m ago 23h count:1 quay.io/cepceph-grafana:6.7.4 557c83e11646 mgr 2/2 7m ago 23h count:2 quay.io/cepceph:v15 93146564743f mon 3/3 7m ago 118m ceph-node01;ceph-node02;ceph-node03 quay.io/cepceph:v15 93146564743f node-exporter 3/3 7m ago 23h * quay.iprometheus/node-exporter:v0.18.1 e5a616e4b9cf prometheus 1/1 7m ago 23h count:1 quay.iprometheus/prometheus:v2.18.1 de242295e225 查询Deamon状态 ceph orch ps NAME HOST STATUS REFRESHED AGE VERSION IMAGE NAME IMAGE ID CONTAINER ID alertmanager.ceph-node01 ceph-node01 running (2h) 3m ago 4w 0.20.0 quay.io/prometheus/alertmanager:v0.20.0 0881eb8f169f 689490756acc crash.ceph-node01 ceph-node01 running (2h) 3m ago 4w 15.2.17 quay.io/ceph/ceph:v15 93146564743f 5c05118fec32 crash.ceph-node02 ceph-node02 running (2h) 3m ago 4w 15.2.17 quay.io/ceph/ceph:v15 93146564743f bbc408935136 crash.ceph-node03 ceph-node03 running (2h) 3m ago 4w 15.2.17 quay.io/ceph/ceph:v15 93146564743f 87c1e705053e grafana.ceph-node01 ceph-node01 running (2h) 3m ago 4w 6.7.4 quay.io/ceph/ceph-grafana:6.7.4 557c83e11646 e211ea6be042 mgr.ceph-node01.wmeddo ceph-node01 running (2h) 3m ago 5d 15.2.17 quay.io/ceph/ceph:v15 93146564743f e465de9c3e9d mgr.ceph-node02.hyipxw ceph-node02 running (2h) 3m ago 4w 15.2.17 quay.io/ceph/ceph:v15 93146564743f 5026b159b240 mon.ceph-node01 ceph-node01 running (2h) 3m ago 4w 15.2.17 quay.io/ceph/ceph:v15 93146564743f 3f48f4045628 mon.ceph-node02 ceph-node02 running (2h) 3m ago 4w 15.2.17 quay.io/ceph/ceph:v15 93146564743f 3cf45764cafb mon.ceph-node03 ceph-node03 running (2h) 3m ago 4w 15.2.17 quay.io/ceph/ceph:v15 93146564743f f689c97923f6 node-exporter.ceph-node01 ceph-node01 running (2h) 3m ago 4w 0.18.1 quay.io/prometheus/node-exporter:v0.18.1 e5a616e4b9cf 12aec21e4c45 node-exporter.ceph-node02 ceph-node02 running (2h) 3m ago 4w 0.18.1 quay.io/prometheus/node-exporter:v0.18.1 e5a616e4b9cf 4fcfb820aa3b node-exporter.ceph-node03 ceph-node03 running (2h) 3m ago 4w 0.18.1 quay.io/prometheus/node-exporter:v0.18.1 e5a616e4b9cf 8aee37a4868b prometheus.ceph-node01 ceph-node01 running (2h) 3m ago 4w 2.18.1 quay.io/prometheus/prometheus:v2.18.1 de242295e225 aa30615a1ce0 查看orch管理的主机列表 ceph orch host ls HOST ADDR LABELS STATUS ceph-node01 ceph-node01 _admin mgr mon ceph-node02 ceph-node02 mgr mon ceph-node03 ceph-node03 mon 5. 部署osd 添加OSD需求满足以下所有条件：\n设备必须没有分区。\n设备不得具有任何LVM状态。\n不得安装设备。\n该设备不得包含文件系统。\n该设备不得包含Ceph BlueStore OSD。\n设备必须大于5 GB。\norch模块自动部署osd ceph orch apply osd --all-available-devices 暂停orch模块自动管理osd（可选） ceph orch apply osd --all-available-devices --unmanaged=true 手动新增osd（可选） ceph orch device ls ceph orch device zap ceph-node01 /dev/sdb --force ceph orch daemon add osd ceph-node01:/dev/sdb 移除osd ceph orch daemon stop osd.2 ceph orch osd rm 2 #等待数据平衡 ceph orch osd rm status ceph osd tree ceph osd out osd.2 #等待数据平衡 ceph osd purge osd.2 --force ceph osd crush ls ceph-node01 ceph orch daemon rm osd.2 --force 问题：wipefs: error: /dev/sdb: probing initialization failed: Device or resource busy 解决办法：\n移除逻辑卷： dmsetup remove --force ceph--cd03e720--2f3e--497e--8f7a--97432c2b675d-osd--block--c4b4700e--1001--473a--ab05--470b7e9c711e 擦除文件系统的签名 wipefs -a /dev/sdb 重新初始化 ceph orch device zap ceph-node01 /dev/sdb --force 问题：集群所有mgr全部down，集群报warning，无法使用orch管理。 找到mgr一个节点，mgr一般保存位置为：/var/lib/ceph/{fsid}/mgr.node.name\n通过cephadm临时拉起mgr服务：\ncephadm run --name {mgr.node.name} --fsid {fsid} 然后用orch模块拉起剩余mgr服务： ceph orch ps ceph orch daemon start mgr.ceph-node01.name 停掉cephadm临时拉起的mgr，然后用orch模块重启所有mgr： ceph orch restart mgr 6. 部署CEPHFS服务 使用ceph fs创建 创建cephfs文件系统，新版本ceph会自动创建mds服务，使用cephfs文件系统需要一个或多个MDS服务。\nceph fs volume create cephfs --placement=3 ceph fs status # 或者手动部署mds守护进程： ceph orch apply mds cephfs --placement 3 ceph orch ls 查看ceph fs状态，可以显示主备mds节点信息，文件系统情况\nceph fs status ceph fs ls ceph mds stat 手动创建 # 创建fs data池，启用erasure纠删功能，也可以使用replicated功能。 ceph osd pool create cephfs.cephfs.data 32 erasure # 创建fs metadata池，只能默认replicated复制功能 ceph osd pool create cephfs.cephfs.meta 32 # 创建ceph fs，附上metadata和data池 ceph fs new cephfs cephfs.cephfs.meta cephfs.cephfs.data # 手动部署cephfs mds服务 ceph orch apply mds cephfs --placement=3 （可选）可将cephfs的数据池设置启用纠删码(pool创建时需要指定为erasure参数)，然后启用ec overwrites。但cephfs metadata元数据池不能使用纠删码，因为元数据使用OMAP数据结构所以不支持。\nceph osd pool set cephfs.cephfs.data allow_ec_overwrites true Linux挂载cephfs文件系统方法 生成ceph配置文件至客户端主机 mkdir -p -m 755 /etc/ceph ssh {user}@{mon-host} \u0026#34;sudo ceph config generate-minimal-conf\u0026#34; | sudo tee /etc/ceph/ceph.conf chmod 644 /etc/ceph/ceph.conf 生成cephx认证信息 ssh {user}@{mon-host} \u0026#34;sudo ceph fs authorize cephfs client.mountfs / rw\u0026#34; | sudo tee /etceph/ceph.client.mountfs.keyring chmod 600 /etc/ceph/ceph.client.mountfs.keyring 当使用内核驱动挂载cephfs时使用（泄露密钥风险） # mount -t ceph {device-string}:{path-to-mounted} {mount-point} -o {key-value-args{other-args} mount -t ceph 192.168.61.129:6789,192.168.61.130:6789,192.168.61.131:6789:/ /mnt -name=mountfs,secret=AQBtO3dj8bjLNxAAGFHw02lPnlbapyAVwwIBuA== 使用mount.ceph挂载（需要安装ceph-common包） mount -t ceph :/ /mnt -o name=mountfs,fs=cephfs 写入/etc/fstab文件 :/ /mnt ceph name=mountfs,[fs=cephfs,secret=str,]noatime,[nodiratime,]_netdev 0 2 7. 部署CEPH NFS服务 仅支持 NFSv4 协议。\n创建新池 ceph osd pool create ganesha_data 32 ceph osd pool application enable ganesha_data nfs 创建NFS网关 ceph orch apply nfs nfs ganesha_data --placement=2 查看Service状态 ceph orch ls NAME RUNNING REFRESHED AGE PLACEMENT IMAGE NAME IMAGE ID alertmanager 1/1 46s ago 4w count:1 quay.io/prometheus/alertmanager:v0.20.0 0881eb8f169f crash 3/3 48s ago 4w * quay.io/ceph/ceph:v15 93146564743f grafana 1/1 46s ago 4w count:1 quay.io/ceph/ceph-grafana:6.7.4 557c83e11646 mds.cephfs 2/2 48s ago 5d count:2 quay.io/ceph/ceph:v15 93146564743f mgr 2/2 48s ago 9d ceph-node01;ceph-node02 quay.io/ceph/ceph:v15 93146564743f mon 3/3 48s ago 4w ceph-node01;ceph-node02;ceph-node03 quay.io/ceph/ceph:v15 93146564743f nfs.nfs 2/2 46s ago 11m count:2 quay.io/ceph/ceph:v15 93146564743f node-exporter 3/3 48s ago 4w * quay.io/prometheus/node-exporter:v0.18.1 e5a616e4b9cf osd.all-available-devices 3/3 48s ago 9d * quay.io/ceph/ceph:v15 93146564743f prometheus 1/1 46s ago 4w count:1 quay.io/prometheus/prometheus:v2.18.1 de242295e225 查看daemon状态 ceph orch ps NAME HOST STATUS REFRESHED AGE VERSION IMAGE NAME IMAGE ID CONTAINER ID alertmanager.ceph-node01 ceph-node01 running (5h) 81s ago 4w 0.20.0 quay.io/prometheus/alertmanager:v0.20.0 0881eb8f169f 689490756acc crash.ceph-node01 ceph-node01 running (5h) 81s ago 4w 15.2.17 quay.io/ceph/ceph:v15 93146564743f 5c05118fec32 crash.ceph-node02 ceph-node02 running (5h) 84s ago 4w 15.2.17 quay.io/ceph/ceph:v15 93146564743f bbc408935136 crash.ceph-node03 ceph-node03 running (5h) 58s ago 4w 15.2.17 quay.io/ceph/ceph:v15 93146564743f 87c1e705053e grafana.ceph-node01 ceph-node01 running (5h) 81s ago 4w 6.7.4 quay.io/ceph/ceph-grafana:6.7.4 557c83e11646 e211ea6be042 mds.cephfs.ceph-node02.mxqelr ceph-node02 running (5h) 84s ago 5d 15.2.17 quay.io/ceph/ceph:v15 93146564743f 549606028df4 mds.cephfs.ceph-node03.xhcgto ceph-node03 running (5h) 58s ago 5d 15.2.17 quay.io/ceph/ceph:v15 93146564743f ee51fb9c1a8b mgr.ceph-node01.wmeddo ceph-node01 running (5h) 81s ago 6d 15.2.17 quay.io/ceph/ceph:v15 93146564743f e465de9c3e9d mgr.ceph-node02.hyipxw ceph-node02 running (5h) 84s ago 4w 15.2.17 quay.io/ceph/ceph:v15 93146564743f 5026b159b240 mon.ceph-node01 ceph-node01 running (5h) 81s ago 4w 15.2.17 quay.io/ceph/ceph:v15 93146564743f 3f48f4045628 mon.ceph-node02 ceph-node02 running (5h) 84s ago 4w 15.2.17 quay.io/ceph/ceph:v15 93146564743f 3cf45764cafb mon.ceph-node03 ceph-node03 running (5h) 58s ago 4w 15.2.17 quay.io/ceph/ceph:v15 93146564743f f689c97923f6 nfs.nfs.ceph-node01 ceph-node01 running (11m) 81s ago 11m 3.3 quay.io/ceph/ceph:v15 93146564743f 117e58e5990c nfs.nfs.ceph-node03 ceph-node03 running (60s) 58s ago 11m 3.3 quay.io/ceph/ceph:v15 93146564743f 3662ecedd542 node-exporter.ceph-node01 ceph-node01 running (5h) 81s ago 4w 0.18.1 quay.io/prometheus/node-exporter:v0.18.1 e5a616e4b9cf 12aec21e4c45 node-exporter.ceph-node02 ceph-node02 running (5h) 84s ago 4w 0.18.1 quay.io/prometheus/node-exporter:v0.18.1 e5a616e4b9cf 4fcfb820aa3b node-exporter.ceph-node03 ceph-node03 running (5h) 58s ago 4w 0.18.1 quay.io/prometheus/node-exporter:v0.18.1 e5a616e4b9cf 8aee37a4868b osd.0 ceph-node03 running (5h) 58s ago 4w 15.2.17 quay.io/ceph/ceph:v15 93146564743f 4d8635a833cc osd.1 ceph-node02 running (5h) 84s ago 3w 15.2.17 quay.io/ceph/ceph:v15 93146564743f 6fa84fe728c7 osd.2 ceph-node01 running (5h) 81s ago 9d 15.2.17 quay.io/ceph/ceph:v15 93146564743f 16d42b3583ea prometheus.ceph-node01 ceph-node01 running (5h) 81s ago 4w 2.18.1 quay.io/prometheus/prometheus:v2.18.1 de242295e225 aa30615a1ce0 NFS 高可用(高版本支持) ingress nfs 部署文件：ingress-nfs.yml service_type: ingress service_id: nfs.nfs placement: count: 2 spec: backend_service: nfs.nfs frontend_port: 2050 # 对外服务端口 monitor_port: 9000 # haproxy查看状态页面 virtual_ip: 192.168.61.140/24 部署 ceph orch apply -i ingress-nfs.yaml 8. 部署RGW服务 ceph orch apply rgw object-service us-east-1 --placement=3 默认情况下，cephadm会自动创建realm和zone，或者也可以手动创建realm，zonegroup，zone。\nradosgw-admin realm create --rgw-realm=\u0026lt;realm-name\u0026gt; --default radosgw-admin zonegroup create --rgw-zonegroup=\u0026lt;zonegroup-name\u0026gt; --master --default radosgw-admin zone create --rgw-zonegroup=\u0026lt;zonegroup-name\u0026gt; --rgw-zone=\u0026lt;zone-name\u0026gt; --master --default radosgw-admin period update --rgw-realm=\u0026lt;realm-name\u0026gt; --commit ","permalink":"https://gnail89.github.io/posts/install-ceph-octopus-with-cephadm/","summary":"1. 环境信息 CentOS 7 禁用firewalld 禁用selinux 时钟同步 设置主机名 ip addr hostname 192.168.61.129 ceph-node01 192.168.61.130 ceph-node02 192.168.61.131 ceph-node03 2. 安装依赖包 所有节点都需要安装\n安装epel和elrepo软件源 yum install -y epel-release elrepo-release 安装python3 yum install -y python3 升级kernel至最新 yum --enablerepo=elrepo-kernel install -y kernel-ml # 设置默认使用的内核 grubby --default-index grubby --info=ALL grubby --set-default-index=0 安装docker-ce软件源 cd /etc/yum.repos.d/ curl --remote-name https://download.docker.com/linux/centos/docker-ce.repo 安装最新版本docker yum install -y docker-ce systemctl start docker systemctl enable docker 重启生效 3. 安装cephadm curl --remote-name --location https://mirrors.tuna.tsinghua.edu.cn/ceph/rpm-octopus/elnoarch/cephadm chmod +x .","title":"Install Ceph Octopus With Cephadm"},{"content":"1. 基本语法 Markdown语法主要分类: 标题, 段落, 区块引用, 代码区块, 强调, 列表, 分割线, 链接, 图片, 反斜杠\\, 符号\u0026rsquo;`' 标题 使用=和-符号标记一级和二级标题 这是一级标题 ========== 这是二级标题 ---------- 使用#符号，可以表示1-6级标题 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 段落 段落内强制换行使用两个以上空格加上回车, 引用中换行可省略回车 区块引用 在段落的每行或只在第一行使用符号\u0026gt;,还可使用多个嵌套引用 \u0026gt; 区块引用 \u0026gt;\u0026gt; 嵌套引用 代码区块 代码区块的建立是在每行加上4个空格或者一个制表符 注意:需要和普通段落之间存在空行。\nvoid main() { printf(\u0026quot;Hello, Markdown.\u0026quot;); } 强调 在强调内容两侧分别加上*或者_ *斜体* _斜体_ **粗体** __粗体__ ***斜体加粗*** ~~删除线~~ 列表 使用星号*,加号+,减号-标记无序列表 * 无序列表文字 * 无序列表文字 * 无序列表文字 + 无序列表文字 + 无序列表文字 + 无序列表文字 - 无序列表文字 - 无序列表文字 - 无序列表文字 有序列表的标记方式是将上述的符号换成数字,并加上英文句号.,后面还有一个空格 1. 有序列表 2. 有序列表 3. 有序列表 分割线 分割线最常使用就是三个或以上*或-或_ 链接 链接可以由两种形式生成：行内式和参考式\n行内式:\n[显示名称](https://www.google.com \u0026#34;链接别名\u0026#34;) 效果:\n显示名称\n参考式: [显示名称1][1] [显示名称2][2] [1]:https://www.google.com \u0026#34;链接别名1\u0026#34; [2]:https://www.google.com \u0026#34;链接别名2\u0026#34; 效果: 显示名称1 显示名称2\n图片 添加图片的形式和链接相似，只需在链接的基础上前方加一个英文感叹号! ![显示名称](https://www.google.com/logo.png \u0026#34;链接别名\u0026#34;) 反斜杠\\ 相当于反转义作用。使符号成为普通符号 以下列出的字符都可以通过使用反斜杠字符从而达到转义目的。 Character Name \\ backslash ` backtick (see also escaping backticks in code) * asterisk _ underscore { } curly braces [ ] brackets ( ) parentheses # pound sign + plus sign - minus sign (hyphen) . dot ! exclamation mark | pipe (see also escaping pipe in tables) 符号\u0026rsquo;`' 起到标记的作用, 例如: `point` 效果:\npoint\n2. 扩展语法 表格 要添加表，请使用三个或多个连字符（---）创建每列的标题，并使用管道（|）分隔每列。您可以选择在表的任一端添加管道。\n| Syntax | Description | | ----------- | ----------- | | Header | Title | | Paragraph | Text | 效果： Syntax Description Header Title Paragraph Text 对齐 通过在标题行中的连字符的左侧，右侧或两侧添加冒号（:），将列中的文本对齐到左侧，右侧或中心。\n| Syntax | Description | Test Text | | :--- | :----: | ---: | | Header | Title | Here\u0026#39;s this | | Paragraph | Text | And more | 效果： Syntax Description Test Text Header Title Here\u0026rsquo;s this Paragraph Text And more 围栏代码块 Markdown基本语法允许您通过将行缩进四个空格或一个制表符来创建代码块。如果发现不方便，请尝试使用受保护的代码块。根据Markdown处理器或编辑器的不同，您将在代码块之前和之后的行上使用三个反引号(```）或三个波浪号（~~~）。\n``` { \u0026quot;firstName\u0026quot;: \u0026quot;John\u0026quot;, \u0026quot;lastName\u0026quot;: \u0026quot;Smith\u0026quot;, \u0026quot;age\u0026quot;: 25 } ``` 效果： { \u0026#34;firstName\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;age\u0026#34;: 25 } 语法高亮 许多Markdown处理器都支持受围栏代码块的语法突出显示。使用此功能，您可以为编写代码的任何语言添加颜色突出显示。要添加语法突出显示，请在受防护的代码块之前的反引号旁边指定一种语言。\n```json { \u0026quot;firstName\u0026quot;: \u0026quot;John\u0026quot;, \u0026quot;lastName\u0026quot;: \u0026quot;Smith\u0026quot;, \u0026quot;age\u0026quot;: 25 } ``` 效果： { \u0026#34;firstName\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;age\u0026#34;: 25 } 定义列表 一些Markdown处理器允许您创建术语及其对应定义的定义列表。要创建定义列表，请在第一行上键入术语。在下一行，键入一个冒号，后跟一个空格和定义。\nFirst Term : This is the definition of the first term. Second Term : This is one definition of the second term. : This is another definition of the second term. 效果： First Term This is the definition of the first term. Second Term This is one definition of the second term. This is another definition of the second term. 任务列表语法 任务列表使您可以创建带有复选框的项目列表。在支持任务列表的Markdown应用程序中，复选框将显示在内容旁边。要创建任务列表，请在任务列表项之前添加破折号-和方括号[ ]，并在[ ]前面加上空格。要选择一个复选框，请在方括号[x]之间添加 x 。\n- [x] Write the press release - [ ] Update the website - [ ] Contact the media 效果： Write the press release Update the website Contact the media 使用 Emoji 表情 有两种方法可以将表情符号添加到Markdown文件中：将表情符号复制并粘贴到Markdown格式的文本中，或者键入emoji shortcodes。\n复制和粘贴表情符号 在大多数情况下，您可以简单地从Emojipedia等来源复制表情符号并将其粘贴到文档中。许多Markdown应用程序会自动以Markdown格式的文本显示表情符号。从Markdown应用程序导出的HTML和PDF文件应显示表情符号。\nTip: 如果您使用的是静态网站生成器，请确保将HTML页面编码为UTF-8。\n使用表情符号简码 一些Markdown应用程序允许您通过键入表情符号短代码来插入表情符号。这些以冒号开头和结尾，并包含表情符号的名称。\n图钉 📌 效果： 图钉 📌\n自动网址链接 许多Markdown处理器会自动将URL转换为链接。这意味着如果您输入http://www.example.com，即使您未使用方括号，您的Markdown处理器也会自动将其转换为链接。\nhttp://www.example.com 效果： http://www.example.com\n禁用自动URL链接 如果您不希望自动链接URL，则可以通过将URL表示为带反引号(`)的代码来删除该链接。\n`http://www.example.com` 效果： http://www.example.com\n脚注 Here\u0026#39;s a simple footnote,[^1] and here\u0026#39;s a longer one.[^bignote] [^1]: This is the first footnote. [^bignote]: Here\u0026#39;s one with multiple paragraphs and code. Indent paragraphs to include them in the footnote. `{ my code }` Add as many paragraphs as you like. 效果： Here\u0026rsquo;s a simple footnote,1 and here\u0026rsquo;s a longer one.2\n参考资料3\nThis is the first footnote.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nHere\u0026rsquo;s one with multiple paragraphs and code.\nIndent paragraphs to include them in the footnote.\n{ my code }\nAdd as many paragraphs as you like.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://markdown.com.cn\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://gnail89.github.io/posts/markdown/","summary":"1. 基本语法 Markdown语法主要分类: 标题, 段落, 区块引用, 代码区块, 强调, 列表, 分割线, 链接, 图片, 反斜杠\\, 符号\u0026rsquo;`' 标题 使用=和-符号标记一级和二级标题 这是一级标题 ========== 这是二级标题 ---------- 使用#符号，可以表示1-6级标题 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 段落 段落内强制换行使用两个以上空格加上回车, 引用中换行可省略回车 区块引用 在段落的每行或只在第一行使用符号\u0026gt;,还可使用多个嵌套引用 \u0026gt; 区块引用 \u0026gt;\u0026gt; 嵌套引用 代码区块 代码区块的建立是在每行加上4个空格或者一个制表符 注意:需要和普通段落之间存在空行。\nvoid main() { printf(\u0026quot;Hello, Markdown.\u0026quot;); } 强调 在强调内容两侧分别加上*或者_ *斜体* _斜体_ **粗体** __粗体__ ***斜体加粗*** ~~删除线~~ 列表 使用星号*,加号+,减号-标记无序列表 * 无序列表文字 * 无序列表文字 * 无序列表文字 + 无序列表文字 + 无序列表文字 + 无序列表文字 - 无序列表文字 - 无序列表文字 - 无序列表文字 有序列表的标记方式是将上述的符号换成数字,并加上英文句号.","title":"Markdown基本语法"},{"content":"教程 Markdown 教程 Pro Git 2 简体中文\ngit在线学习工具\n菜鸟教程\nLinux命令大全\n鸟哥教程\n工具 开源中国在线工具\n菜鸟教程在线工具\n程序员在线工具\n脚本之家在线工具\nw3cschool在线工具\n在线压缩转换工具\n码云开源项目推荐列表\n博客 Java全栈知识体系 ","permalink":"https://gnail89.github.io/posts/website-favorites/","summary":"教程 Markdown 教程 Pro Git 2 简体中文\ngit在线学习工具\n菜鸟教程\nLinux命令大全\n鸟哥教程\n工具 开源中国在线工具\n菜鸟教程在线工具\n程序员在线工具\n脚本之家在线工具\nw3cschool在线工具\n在线压缩转换工具\n码云开源项目推荐列表\n博客 Java全栈知识体系 ","title":"网站收藏夹"}]